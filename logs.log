2024-11-30 16:34:47,446:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 16:34:47,446:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 16:34:47,446:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 16:34:47,447:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 16:34:50,064:INFO:PyCaret ClassificationExperiment
2024-11-30 16:34:50,065:INFO:Logging name: clf-default-name
2024-11-30 16:34:50,066:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-30 16:34:50,066:INFO:version 3.3.2
2024-11-30 16:34:50,066:INFO:Initializing setup()
2024-11-30 16:34:50,067:INFO:self.USI: 2d53
2024-11-30 16:34:50,067:INFO:self._variable_keys: {'y_train', 'html_param', 'n_jobs_param', 'exp_name_log', 'fold_groups_param', 'memory', 'fold_generator', 'y_test', 'data', 'pipeline', '_available_plots', 'idx', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'gpu_param', 'is_multiclass', 'y', '_ml_usecase', 'log_plots_param', 'fix_imbalance', 'logging_param', 'fold_shuffle_param', 'X_train', 'USI', 'X', 'X_test', 'seed'}
2024-11-30 16:34:50,067:INFO:Checking environment
2024-11-30 16:34:50,067:INFO:python_version: 3.9.12
2024-11-30 16:34:50,067:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2024-11-30 16:34:50,067:INFO:machine: AMD64
2024-11-30 16:34:50,068:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-30 16:34:50,071:INFO:Memory: svmem(total=8481583104, available=1762504704, percent=79.2, used=6719078400, free=1762504704)
2024-11-30 16:34:50,071:INFO:Physical Core: 2
2024-11-30 16:34:50,071:INFO:Logical Core: 4
2024-11-30 16:34:50,072:INFO:Checking libraries
2024-11-30 16:34:50,072:INFO:System:
2024-11-30 16:34:50,072:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2024-11-30 16:34:50,072:INFO:executable: c:\Users\Administrateur\anaconda3\python.exe
2024-11-30 16:34:50,072:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-30 16:34:50,072:INFO:PyCaret required dependencies:
2024-11-30 16:34:50,712:INFO:                 pip: 21.2.4
2024-11-30 16:34:50,712:INFO:          setuptools: 61.2.0
2024-11-30 16:34:50,712:INFO:             pycaret: 3.3.2
2024-11-30 16:34:50,712:INFO:             IPython: 8.2.0
2024-11-30 16:34:50,712:INFO:          ipywidgets: 7.6.5
2024-11-30 16:34:50,712:INFO:                tqdm: 4.64.0
2024-11-30 16:34:50,713:INFO:               numpy: 1.21.6
2024-11-30 16:34:50,713:INFO:              pandas: 1.4.2
2024-11-30 16:34:50,713:INFO:              jinja2: 2.11.3
2024-11-30 16:34:50,713:INFO:               scipy: 1.7.3
2024-11-30 16:34:50,713:INFO:              joblib: 1.1.0
2024-11-30 16:34:50,713:INFO:             sklearn: 1.0.2
2024-11-30 16:34:50,713:INFO:                pyod: 2.0.2
2024-11-30 16:34:50,713:INFO:            imblearn: 0.12.4
2024-11-30 16:34:50,713:INFO:   category_encoders: 2.6.4
2024-11-30 16:34:50,713:INFO:            lightgbm: 4.5.0
2024-11-30 16:34:50,713:INFO:               numba: 0.55.1
2024-11-30 16:34:50,713:INFO:            requests: 2.27.1
2024-11-30 16:34:50,713:INFO:          matplotlib: 3.5.1
2024-11-30 16:34:50,713:INFO:          scikitplot: 0.3.7
2024-11-30 16:34:50,714:INFO:         yellowbrick: 1.5
2024-11-30 16:34:50,714:INFO:              plotly: 5.6.0
2024-11-30 16:34:50,715:INFO:    plotly-resampler: Not installed
2024-11-30 16:34:50,715:INFO:             kaleido: 0.2.1
2024-11-30 16:34:50,715:INFO:           schemdraw: 0.15
2024-11-30 16:34:50,715:INFO:         statsmodels: 0.13.2
2024-11-30 16:34:50,715:INFO:              sktime: 0.26.0
2024-11-30 16:34:50,716:INFO:               tbats: 1.1.3
2024-11-30 16:34:50,716:INFO:            pmdarima: 2.0.4
2024-11-30 16:34:50,716:INFO:              psutil: 5.8.0
2024-11-30 16:34:50,716:INFO:          markupsafe: 2.0.1
2024-11-30 16:34:50,716:INFO:             pickle5: Not installed
2024-11-30 16:34:50,716:INFO:         cloudpickle: 2.0.0
2024-11-30 16:34:50,716:INFO:         deprecation: 2.1.0
2024-11-30 16:34:50,716:INFO:              xxhash: 3.5.0
2024-11-30 16:34:50,717:INFO:           wurlitzer: Not installed
2024-11-30 16:34:50,717:INFO:PyCaret optional dependencies:
2024-11-30 16:34:50,750:INFO:                shap: Not installed
2024-11-30 16:34:50,751:INFO:           interpret: Not installed
2024-11-30 16:34:50,751:INFO:                umap: Not installed
2024-11-30 16:34:50,751:INFO:     ydata_profiling: Not installed
2024-11-30 16:34:50,751:INFO:  explainerdashboard: Not installed
2024-11-30 16:34:50,751:INFO:             autoviz: Not installed
2024-11-30 16:34:50,751:INFO:           fairlearn: Not installed
2024-11-30 16:34:50,751:INFO:          deepchecks: Not installed
2024-11-30 16:34:50,752:INFO:             xgboost: Not installed
2024-11-30 16:34:50,752:INFO:            catboost: Not installed
2024-11-30 16:34:50,752:INFO:              kmodes: Not installed
2024-11-30 16:34:50,752:INFO:             mlxtend: Not installed
2024-11-30 16:34:50,752:INFO:       statsforecast: Not installed
2024-11-30 16:34:50,752:INFO:        tune_sklearn: Not installed
2024-11-30 16:34:50,752:INFO:                 ray: Not installed
2024-11-30 16:34:50,752:INFO:            hyperopt: Not installed
2024-11-30 16:34:50,752:INFO:              optuna: Not installed
2024-11-30 16:34:50,752:INFO:               skopt: Not installed
2024-11-30 16:34:50,753:INFO:              mlflow: Not installed
2024-11-30 16:34:50,753:INFO:              gradio: Not installed
2024-11-30 16:34:50,753:INFO:             fastapi: Not installed
2024-11-30 16:34:50,753:INFO:             uvicorn: Not installed
2024-11-30 16:34:50,753:INFO:              m2cgen: Not installed
2024-11-30 16:34:50,753:INFO:           evidently: Not installed
2024-11-30 16:34:50,753:INFO:               fugue: Not installed
2024-11-30 16:34:50,753:INFO:           streamlit: Not installed
2024-11-30 16:34:50,753:INFO:             prophet: Not installed
2024-11-30 16:34:50,754:INFO:None
2024-11-30 16:34:50,754:INFO:Set up data.
2024-11-30 16:34:50,770:INFO:Set up folding strategy.
2024-11-30 16:34:50,770:INFO:Set up train/test split.
2024-11-30 16:34:50,788:INFO:Set up index.
2024-11-30 16:34:50,790:INFO:Assigning column types.
2024-11-30 16:34:50,799:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-30 16:34:50,862:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 16:34:50,871:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 16:34:50,929:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:50,931:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:50,992:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 16:34:50,994:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 16:34:51,036:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,036:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,037:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-30 16:34:51,101:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 16:34:51,146:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,147:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,209:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 16:34:51,253:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,253:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,254:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-30 16:34:51,363:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,364:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,510:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,510:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:51,526:INFO:Preparing preprocessing pipeline...
2024-11-30 16:34:51,535:INFO:Set up label encoding.
2024-11-30 16:34:51,535:INFO:Set up simple imputation.
2024-11-30 16:34:51,536:INFO:Set up feature normalization.
2024-11-30 16:34:51,724:INFO:Finished creating preprocessing pipeline.
2024-11-30 16:34:51,757:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-11-30 16:34:51,757:INFO:Creating final display dataframe.
2024-11-30 16:34:52,114:INFO:Setup _display_container:                     Description                     Value
0                    Session id                      2023
1                        Target                   diabete
2                   Target type                    Binary
3                Target mapping  negative: 0, positive: 1
4           Original data shape                  (724, 5)
5        Transformed data shape                  (724, 5)
6   Transformed train set shape                  (506, 5)
7    Transformed test set shape                  (218, 5)
8              Numeric features                         4
9                    Preprocess                      True
10              Imputation type                    simple
11           Numeric imputation                      mean
12       Categorical imputation                      mode
13                    Normalize                      True
14             Normalize method                    zscore
15               Fold Generator           StratifiedKFold
16                  Fold Number                         5
17                     CPU Jobs                        -1
18                      Use GPU                     False
19               Log Experiment                     False
20              Experiment Name          clf-default-name
21                          USI                      2d53
2024-11-30 16:34:52,283:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:52,283:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:52,388:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:52,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:34:52,392:INFO:setup() successfully completed in 2.33s...............
2024-11-30 16:44:43,577:INFO:PyCaret ClassificationExperiment
2024-11-30 16:44:43,577:INFO:Logging name: clf-default-name
2024-11-30 16:44:43,577:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-30 16:44:43,578:INFO:version 3.3.2
2024-11-30 16:44:43,578:INFO:Initializing setup()
2024-11-30 16:44:43,578:INFO:self.USI: bd0e
2024-11-30 16:44:43,578:INFO:self._variable_keys: {'y_train', 'html_param', 'n_jobs_param', 'exp_name_log', 'fold_groups_param', 'memory', 'fold_generator', 'y_test', 'data', 'pipeline', '_available_plots', 'idx', 'exp_id', 'target_param', 'gpu_n_jobs_param', 'gpu_param', 'is_multiclass', 'y', '_ml_usecase', 'log_plots_param', 'fix_imbalance', 'logging_param', 'fold_shuffle_param', 'X_train', 'USI', 'X', 'X_test', 'seed'}
2024-11-30 16:44:43,579:INFO:Checking environment
2024-11-30 16:44:43,579:INFO:python_version: 3.9.12
2024-11-30 16:44:43,579:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2024-11-30 16:44:43,579:INFO:machine: AMD64
2024-11-30 16:44:43,580:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-30 16:44:43,584:INFO:Memory: svmem(total=8481583104, available=1796255744, percent=78.8, used=6685327360, free=1796255744)
2024-11-30 16:44:43,585:INFO:Physical Core: 2
2024-11-30 16:44:43,585:INFO:Logical Core: 4
2024-11-30 16:44:43,585:INFO:Checking libraries
2024-11-30 16:44:43,586:INFO:System:
2024-11-30 16:44:43,586:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2024-11-30 16:44:43,587:INFO:executable: c:\Users\Administrateur\anaconda3\python.exe
2024-11-30 16:44:43,587:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-30 16:44:43,588:INFO:PyCaret required dependencies:
2024-11-30 16:44:43,588:INFO:                 pip: 21.2.4
2024-11-30 16:44:43,589:INFO:          setuptools: 61.2.0
2024-11-30 16:44:43,589:INFO:             pycaret: 3.3.2
2024-11-30 16:44:43,589:INFO:             IPython: 8.2.0
2024-11-30 16:44:43,589:INFO:          ipywidgets: 7.6.5
2024-11-30 16:44:43,590:INFO:                tqdm: 4.64.0
2024-11-30 16:44:43,590:INFO:               numpy: 1.21.6
2024-11-30 16:44:43,590:INFO:              pandas: 1.4.2
2024-11-30 16:44:43,591:INFO:              jinja2: 2.11.3
2024-11-30 16:44:43,591:INFO:               scipy: 1.7.3
2024-11-30 16:44:43,592:INFO:              joblib: 1.1.0
2024-11-30 16:44:43,592:INFO:             sklearn: 1.0.2
2024-11-30 16:44:43,593:INFO:                pyod: 2.0.2
2024-11-30 16:44:43,593:INFO:            imblearn: 0.12.4
2024-11-30 16:44:43,593:INFO:   category_encoders: 2.6.4
2024-11-30 16:44:43,594:INFO:            lightgbm: 4.5.0
2024-11-30 16:44:43,594:INFO:               numba: 0.55.1
2024-11-30 16:44:43,594:INFO:            requests: 2.27.1
2024-11-30 16:44:43,595:INFO:          matplotlib: 3.5.1
2024-11-30 16:44:43,595:INFO:          scikitplot: 0.3.7
2024-11-30 16:44:43,595:INFO:         yellowbrick: 1.5
2024-11-30 16:44:43,596:INFO:              plotly: 5.6.0
2024-11-30 16:44:43,596:INFO:    plotly-resampler: Not installed
2024-11-30 16:44:43,596:INFO:             kaleido: 0.2.1
2024-11-30 16:44:43,596:INFO:           schemdraw: 0.15
2024-11-30 16:44:43,597:INFO:         statsmodels: 0.13.2
2024-11-30 16:44:43,597:INFO:              sktime: 0.26.0
2024-11-30 16:44:43,597:INFO:               tbats: 1.1.3
2024-11-30 16:44:43,597:INFO:            pmdarima: 2.0.4
2024-11-30 16:44:43,598:INFO:              psutil: 5.8.0
2024-11-30 16:44:43,598:INFO:          markupsafe: 2.0.1
2024-11-30 16:44:43,598:INFO:             pickle5: Not installed
2024-11-30 16:44:43,599:INFO:         cloudpickle: 2.0.0
2024-11-30 16:44:43,599:INFO:         deprecation: 2.1.0
2024-11-30 16:44:43,599:INFO:              xxhash: 3.5.0
2024-11-30 16:44:43,599:INFO:           wurlitzer: Not installed
2024-11-30 16:44:43,600:INFO:PyCaret optional dependencies:
2024-11-30 16:44:43,600:INFO:                shap: Not installed
2024-11-30 16:44:43,600:INFO:           interpret: Not installed
2024-11-30 16:44:43,601:INFO:                umap: Not installed
2024-11-30 16:44:43,601:INFO:     ydata_profiling: Not installed
2024-11-30 16:44:43,601:INFO:  explainerdashboard: Not installed
2024-11-30 16:44:43,601:INFO:             autoviz: Not installed
2024-11-30 16:44:43,602:INFO:           fairlearn: Not installed
2024-11-30 16:44:43,602:INFO:          deepchecks: Not installed
2024-11-30 16:44:43,602:INFO:             xgboost: Not installed
2024-11-30 16:44:43,602:INFO:            catboost: Not installed
2024-11-30 16:44:43,602:INFO:              kmodes: Not installed
2024-11-30 16:44:43,603:INFO:             mlxtend: Not installed
2024-11-30 16:44:43,603:INFO:       statsforecast: Not installed
2024-11-30 16:44:43,603:INFO:        tune_sklearn: Not installed
2024-11-30 16:44:43,603:INFO:                 ray: Not installed
2024-11-30 16:44:43,603:INFO:            hyperopt: Not installed
2024-11-30 16:44:43,604:INFO:              optuna: Not installed
2024-11-30 16:44:43,604:INFO:               skopt: Not installed
2024-11-30 16:44:43,604:INFO:              mlflow: Not installed
2024-11-30 16:44:43,604:INFO:              gradio: Not installed
2024-11-30 16:44:43,604:INFO:             fastapi: Not installed
2024-11-30 16:44:43,604:INFO:             uvicorn: Not installed
2024-11-30 16:44:43,604:INFO:              m2cgen: Not installed
2024-11-30 16:44:43,604:INFO:           evidently: Not installed
2024-11-30 16:44:43,604:INFO:               fugue: Not installed
2024-11-30 16:44:43,605:INFO:           streamlit: Not installed
2024-11-30 16:44:43,605:INFO:             prophet: Not installed
2024-11-30 16:44:43,605:INFO:None
2024-11-30 16:44:43,605:INFO:Set up data.
2024-11-30 16:44:43,630:INFO:Set up folding strategy.
2024-11-30 16:44:43,630:INFO:Set up train/test split.
2024-11-30 16:44:43,648:INFO:Set up index.
2024-11-30 16:44:43,648:INFO:Assigning column types.
2024-11-30 16:44:43,671:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-30 16:44:43,762:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 16:44:43,765:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 16:44:43,805:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:43,806:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:43,898:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 16:44:43,899:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 16:44:43,939:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:43,940:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:43,941:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-30 16:44:44,011:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 16:44:44,055:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:44,056:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:44,127:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 16:44:44,170:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:44,171:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:44,171:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-30 16:44:44,282:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:44,282:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:44,394:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:44,395:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:44,398:INFO:Preparing preprocessing pipeline...
2024-11-30 16:44:44,399:INFO:Set up label encoding.
2024-11-30 16:44:44,400:INFO:Set up simple imputation.
2024-11-30 16:44:44,400:INFO:Set up feature normalization.
2024-11-30 16:44:44,526:INFO:Finished creating preprocessing pipeline.
2024-11-30 16:44:44,555:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-11-30 16:44:44,555:INFO:Creating final display dataframe.
2024-11-30 16:44:45,075:INFO:Setup _display_container:                     Description                     Value
0                    Session id                      2024
1                        Target                   diabete
2                   Target type                    Binary
3                Target mapping  negative: 0, positive: 1
4           Original data shape                  (724, 5)
5        Transformed data shape                  (724, 5)
6   Transformed train set shape                  (506, 5)
7    Transformed test set shape                  (218, 5)
8              Numeric features                         4
9                    Preprocess                      True
10              Imputation type                    simple
11           Numeric imputation                      mean
12       Categorical imputation                      mode
13                    Normalize                      True
14             Normalize method                    zscore
15               Fold Generator           StratifiedKFold
16                  Fold Number                         5
17                     CPU Jobs                        -1
18                      Use GPU                     False
19               Log Experiment                     False
20              Experiment Name          clf-default-name
21                          USI                      bd0e
2024-11-30 16:44:45,232:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:45,232:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:45,363:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:45,364:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:44:45,367:INFO:setup() successfully completed in 1.8s...............
2024-11-30 16:47:59,841:INFO:gpu_param set to False
2024-11-30 16:48:00,004:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:48:00,005:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:48:00,126:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:48:00,126:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 16:50:32,313:INFO:Initializing create_model()
2024-11-30 16:50:32,313:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 16:50:32,314:INFO:Checking exceptions
2024-11-30 16:50:32,479:INFO:Importing libraries
2024-11-30 16:50:32,479:INFO:Copying training dataset
2024-11-30 16:50:32,502:INFO:Defining folds
2024-11-30 16:50:32,503:INFO:Declaring metric variables
2024-11-30 16:50:32,538:INFO:Importing untrained model
2024-11-30 16:50:32,559:INFO:Logistic Regression Imported successfully
2024-11-30 16:50:32,612:INFO:Starting cross validation
2024-11-30 16:50:32,659:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 16:50:56,168:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,168:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,168:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,185:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,186:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,186:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,200:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,200:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,201:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,467:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,486:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,502:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,547:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,562:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,578:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:50:56,611:INFO:Calculating mean and std
2024-11-30 16:50:56,617:INFO:Creating metrics dataframe
2024-11-30 16:50:56,649:INFO:Finalizing model
2024-11-30 16:50:56,731:INFO:Uploading results into container
2024-11-30 16:50:56,732:INFO:Uploading model into container now
2024-11-30 16:50:56,770:INFO:_master_model_container: 1
2024-11-30 16:50:56,771:INFO:_display_container: 2
2024-11-30 16:50:56,772:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 16:50:56,773:INFO:create_model() successfully completed......................................
2024-11-30 16:53:29,620:INFO:Initializing predict_model()
2024-11-30 16:53:29,621:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D8FE7398B0>)
2024-11-30 16:53:29,621:INFO:Checking exceptions
2024-11-30 16:53:29,621:INFO:Preloading libraries
2024-11-30 16:53:29,910:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:53:29,918:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:53:29,925:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 16:56:02,605:INFO:Initializing plot_model()
2024-11-30 16:56:02,605:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 16:56:02,605:INFO:Checking exceptions
2024-11-30 16:56:02,630:INFO:Preloading libraries
2024-11-30 16:56:02,630:INFO:Copying training dataset
2024-11-30 16:56:02,630:INFO:Plot type: confusion_matrix
2024-11-30 16:56:03,121:INFO:Fitting Model
2024-11-30 16:56:03,156:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 16:56:03,157:INFO:Scoring test/hold-out set
2024-11-30 16:56:04,004:INFO:Visual Rendered Successfully
2024-11-30 16:56:04,152:INFO:plot_model() successfully completed......................................
2024-11-30 16:58:50,395:INFO:Initializing plot_model()
2024-11-30 16:58:50,396:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 16:58:50,396:INFO:Checking exceptions
2024-11-30 16:58:50,418:INFO:Preloading libraries
2024-11-30 16:58:50,419:INFO:Copying training dataset
2024-11-30 16:58:50,419:INFO:Plot type: confusion_matrix
2024-11-30 16:58:50,736:INFO:Fitting Model
2024-11-30 16:58:50,737:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 16:58:50,737:INFO:Scoring test/hold-out set
2024-11-30 16:58:51,004:INFO:Visual Rendered Successfully
2024-11-30 16:58:51,172:INFO:plot_model() successfully completed......................................
2024-11-30 16:58:51,172:INFO:Initializing plot_model()
2024-11-30 16:58:51,172:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 16:58:51,179:INFO:Checking exceptions
2024-11-30 16:58:51,186:INFO:Preloading libraries
2024-11-30 16:58:51,186:INFO:Copying training dataset
2024-11-30 16:58:51,186:INFO:Plot type: auc
2024-11-30 16:58:51,789:INFO:Fitting Model
2024-11-30 16:58:51,790:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 16:58:51,790:INFO:Scoring test/hold-out set
2024-11-30 16:58:52,373:INFO:Visual Rendered Successfully
2024-11-30 16:58:52,497:INFO:plot_model() successfully completed......................................
2024-11-30 16:58:52,501:INFO:Initializing plot_model()
2024-11-30 16:58:52,501:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 16:58:52,502:INFO:Checking exceptions
2024-11-30 16:58:52,519:INFO:Preloading libraries
2024-11-30 16:58:52,521:INFO:Copying training dataset
2024-11-30 16:58:52,522:INFO:Plot type: pr
2024-11-30 16:58:52,787:INFO:Fitting Model
2024-11-30 16:58:52,787:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 16:58:52,787:INFO:Scoring test/hold-out set
2024-11-30 16:58:53,361:INFO:Visual Rendered Successfully
2024-11-30 16:58:53,477:INFO:plot_model() successfully completed......................................
2024-11-30 16:58:53,478:INFO:Initializing plot_model()
2024-11-30 16:58:53,478:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 16:58:53,478:INFO:Checking exceptions
2024-11-30 16:58:53,491:INFO:Preloading libraries
2024-11-30 16:58:53,491:INFO:Copying training dataset
2024-11-30 16:58:53,492:INFO:Plot type: feature
2024-11-30 16:58:55,164:INFO:Visual Rendered Successfully
2024-11-30 16:58:55,264:INFO:plot_model() successfully completed......................................
2024-11-30 16:58:55,264:INFO:Initializing plot_model()
2024-11-30 16:58:55,264:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 16:58:55,264:INFO:Checking exceptions
2024-11-30 16:58:55,280:INFO:Preloading libraries
2024-11-30 16:58:55,280:INFO:Copying training dataset
2024-11-30 16:58:55,280:INFO:Plot type: error
2024-11-30 16:58:55,565:INFO:Fitting Model
2024-11-30 16:58:55,565:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 16:58:55,565:INFO:Scoring test/hold-out set
2024-11-30 16:58:56,033:INFO:Visual Rendered Successfully
2024-11-30 16:58:56,144:INFO:plot_model() successfully completed......................................
2024-11-30 16:58:56,146:INFO:Initializing plot_model()
2024-11-30 16:58:56,146:INFO:plot_model(plot=calibration, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 16:58:56,146:INFO:Checking exceptions
2024-11-30 16:58:56,157:INFO:Preloading libraries
2024-11-30 16:58:56,157:INFO:Copying training dataset
2024-11-30 16:58:56,157:INFO:Plot type: calibration
2024-11-30 16:58:56,208:INFO:Scoring test/hold-out set
2024-11-30 16:58:56,606:INFO:Visual Rendered Successfully
2024-11-30 16:58:56,713:INFO:plot_model() successfully completed......................................
2024-11-30 16:58:56,713:INFO:Initializing plot_model()
2024-11-30 16:58:56,713:INFO:plot_model(plot=manifold, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 16:58:56,713:INFO:Checking exceptions
2024-11-30 16:58:56,735:INFO:Preloading libraries
2024-11-30 16:58:56,736:INFO:Copying training dataset
2024-11-30 16:58:56,736:INFO:Plot type: manifold
2024-11-30 16:58:57,224:INFO:Fitting & Transforming Model
2024-11-30 16:59:01,766:INFO:Visual Rendered Successfully
2024-11-30 16:59:01,874:INFO:plot_model() successfully completed......................................
2024-11-30 17:00:50,336:INFO:Initializing plot_model()
2024-11-30 17:00:50,336:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:00:50,336:INFO:Checking exceptions
2024-11-30 17:00:50,359:INFO:Preloading libraries
2024-11-30 17:00:50,360:INFO:Copying training dataset
2024-11-30 17:00:50,360:INFO:Plot type: confusion_matrix
2024-11-30 17:00:50,646:INFO:Fitting Model
2024-11-30 17:00:50,646:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:00:50,647:INFO:Scoring test/hold-out set
2024-11-30 17:00:51,037:INFO:Visual Rendered Successfully
2024-11-30 17:00:51,242:INFO:plot_model() successfully completed......................................
2024-11-30 17:00:51,244:INFO:Initializing plot_model()
2024-11-30 17:00:51,244:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:00:51,244:INFO:Checking exceptions
2024-11-30 17:00:51,262:INFO:Preloading libraries
2024-11-30 17:00:51,262:INFO:Copying training dataset
2024-11-30 17:00:51,262:INFO:Plot type: auc
2024-11-30 17:00:51,889:INFO:Fitting Model
2024-11-30 17:00:51,889:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:00:51,889:INFO:Scoring test/hold-out set
2024-11-30 17:00:52,764:INFO:Visual Rendered Successfully
2024-11-30 17:00:52,901:INFO:plot_model() successfully completed......................................
2024-11-30 17:00:52,901:INFO:Initializing plot_model()
2024-11-30 17:00:52,901:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:00:52,901:INFO:Checking exceptions
2024-11-30 17:00:52,924:INFO:Preloading libraries
2024-11-30 17:00:52,924:INFO:Copying training dataset
2024-11-30 17:00:52,924:INFO:Plot type: pr
2024-11-30 17:00:53,135:INFO:Fitting Model
2024-11-30 17:00:53,135:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:00:53,135:INFO:Scoring test/hold-out set
2024-11-30 17:00:53,661:INFO:Visual Rendered Successfully
2024-11-30 17:00:53,816:INFO:plot_model() successfully completed......................................
2024-11-30 17:00:53,820:INFO:Initializing plot_model()
2024-11-30 17:00:53,821:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:00:53,822:INFO:Checking exceptions
2024-11-30 17:00:53,836:INFO:Preloading libraries
2024-11-30 17:00:53,836:INFO:Copying training dataset
2024-11-30 17:00:53,837:INFO:Plot type: feature
2024-11-30 17:00:54,300:INFO:Visual Rendered Successfully
2024-11-30 17:00:54,418:INFO:plot_model() successfully completed......................................
2024-11-30 17:00:54,418:INFO:Initializing plot_model()
2024-11-30 17:00:54,418:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:00:54,418:INFO:Checking exceptions
2024-11-30 17:00:54,434:INFO:Preloading libraries
2024-11-30 17:00:54,434:INFO:Copying training dataset
2024-11-30 17:00:54,434:INFO:Plot type: error
2024-11-30 17:00:54,636:INFO:Fitting Model
2024-11-30 17:00:54,636:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:00:54,636:INFO:Scoring test/hold-out set
2024-11-30 17:00:55,083:INFO:Visual Rendered Successfully
2024-11-30 17:00:55,200:INFO:plot_model() successfully completed......................................
2024-11-30 17:00:55,200:INFO:Initializing plot_model()
2024-11-30 17:00:55,200:INFO:plot_model(plot=calibration, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:00:55,200:INFO:Checking exceptions
2024-11-30 17:00:55,217:INFO:Preloading libraries
2024-11-30 17:00:55,217:INFO:Copying training dataset
2024-11-30 17:00:55,217:INFO:Plot type: calibration
2024-11-30 17:00:55,274:INFO:Scoring test/hold-out set
2024-11-30 17:00:55,756:INFO:Visual Rendered Successfully
2024-11-30 17:00:55,887:INFO:plot_model() successfully completed......................................
2024-11-30 17:00:55,901:INFO:Initializing plot_model()
2024-11-30 17:00:55,902:INFO:plot_model(plot=manifold, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:00:55,902:INFO:Checking exceptions
2024-11-30 17:00:55,913:INFO:Preloading libraries
2024-11-30 17:00:55,914:INFO:Copying training dataset
2024-11-30 17:00:55,915:INFO:Plot type: manifold
2024-11-30 17:00:56,100:INFO:Fitting & Transforming Model
2024-11-30 17:00:59,668:INFO:Visual Rendered Successfully
2024-11-30 17:00:59,776:INFO:plot_model() successfully completed......................................
2024-11-30 17:00:59,776:INFO:Initializing plot_model()
2024-11-30 17:00:59,776:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:00:59,776:INFO:Checking exceptions
2024-11-30 17:00:59,784:INFO:Preloading libraries
2024-11-30 17:00:59,784:INFO:Copying training dataset
2024-11-30 17:00:59,784:INFO:Plot type: class_report
2024-11-30 17:00:59,922:INFO:Fitting Model
2024-11-30 17:00:59,923:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:00:59,923:INFO:Scoring test/hold-out set
2024-11-30 17:01:00,632:INFO:Visual Rendered Successfully
2024-11-30 17:01:00,734:INFO:plot_model() successfully completed......................................
2024-11-30 17:02:53,153:INFO:Initializing tune_model()
2024-11-30 17:02:53,153:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>)
2024-11-30 17:02:53,154:INFO:Checking exceptions
2024-11-30 17:02:53,395:INFO:Copying training dataset
2024-11-30 17:02:53,409:INFO:Checking base model
2024-11-30 17:02:53,409:INFO:Base model : Logistic Regression
2024-11-30 17:02:53,511:INFO:Declaring metric variables
2024-11-30 17:02:53,554:INFO:Defining Hyperparameters
2024-11-30 17:02:53,758:INFO:Tuning with n_jobs=-1
2024-11-30 17:02:53,758:INFO:Initializing RandomizedSearchCV
2024-11-30 17:03:22,113:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 17:03:22,123:INFO:Hyperparameter search completed
2024-11-30 17:03:22,123:INFO:SubProcess create_model() called ==================================
2024-11-30 17:03:22,128:INFO:Initializing create_model()
2024-11-30 17:03:22,128:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D8F916AA60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 17:03:22,129:INFO:Checking exceptions
2024-11-30 17:03:22,129:INFO:Importing libraries
2024-11-30 17:03:22,130:INFO:Copying training dataset
2024-11-30 17:03:22,149:INFO:Defining folds
2024-11-30 17:03:22,150:INFO:Declaring metric variables
2024-11-30 17:03:22,168:INFO:Importing untrained model
2024-11-30 17:03:22,169:INFO:Declaring custom model
2024-11-30 17:03:22,191:INFO:Logistic Regression Imported successfully
2024-11-30 17:03:22,233:INFO:Starting cross validation
2024-11-30 17:03:22,240:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:03:22,516:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,576:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,602:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,605:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,642:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,652:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,666:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,672:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,688:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,695:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,714:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,734:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,949:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,969:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:22,987:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,032:INFO:Calculating mean and std
2024-11-30 17:03:23,051:INFO:Creating metrics dataframe
2024-11-30 17:03:23,074:INFO:Finalizing model
2024-11-30 17:03:23,175:INFO:Uploading results into container
2024-11-30 17:03:23,179:INFO:Uploading model into container now
2024-11-30 17:03:23,181:INFO:_master_model_container: 2
2024-11-30 17:03:23,181:INFO:_display_container: 4
2024-11-30 17:03:23,184:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:03:23,184:INFO:create_model() successfully completed......................................
2024-11-30 17:03:23,322:INFO:SubProcess create_model() end ==================================
2024-11-30 17:03:23,323:INFO:choose_better activated
2024-11-30 17:03:23,333:INFO:SubProcess create_model() called ==================================
2024-11-30 17:03:23,334:INFO:Initializing create_model()
2024-11-30 17:03:23,335:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:03:23,335:INFO:Checking exceptions
2024-11-30 17:03:23,344:INFO:Importing libraries
2024-11-30 17:03:23,344:INFO:Copying training dataset
2024-11-30 17:03:23,352:INFO:Defining folds
2024-11-30 17:03:23,352:INFO:Declaring metric variables
2024-11-30 17:03:23,352:INFO:Importing untrained model
2024-11-30 17:03:23,352:INFO:Declaring custom model
2024-11-30 17:03:23,354:INFO:Logistic Regression Imported successfully
2024-11-30 17:03:23,355:INFO:Starting cross validation
2024-11-30 17:03:23,367:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:03:23,534:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,545:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,549:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,550:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,559:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,584:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,585:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,595:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,600:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,601:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,616:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,799:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,812:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,821:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:03:23,863:INFO:Calculating mean and std
2024-11-30 17:03:23,865:INFO:Creating metrics dataframe
2024-11-30 17:03:23,870:INFO:Finalizing model
2024-11-30 17:03:23,940:INFO:Uploading results into container
2024-11-30 17:03:23,944:INFO:Uploading model into container now
2024-11-30 17:03:23,945:INFO:_master_model_container: 3
2024-11-30 17:03:23,945:INFO:_display_container: 5
2024-11-30 17:03:23,946:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:03:23,946:INFO:create_model() successfully completed......................................
2024-11-30 17:03:24,087:INFO:SubProcess create_model() end ==================================
2024-11-30 17:03:24,089:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:03:24,091:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:03:24,092:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 17:03:24,092:INFO:choose_better completed
2024-11-30 17:03:24,092:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 17:03:24,125:INFO:_master_model_container: 3
2024-11-30 17:03:24,127:INFO:_display_container: 4
2024-11-30 17:03:24,129:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:03:24,130:INFO:tune_model() successfully completed......................................
2024-11-30 17:03:28,031:INFO:Initializing plot_model()
2024-11-30 17:03:28,032:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:03:28,032:INFO:Checking exceptions
2024-11-30 17:03:28,046:INFO:Preloading libraries
2024-11-30 17:03:28,047:INFO:Copying training dataset
2024-11-30 17:03:28,052:INFO:Plot type: confusion_matrix
2024-11-30 17:03:28,264:INFO:Fitting Model
2024-11-30 17:03:28,265:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:03:28,265:INFO:Scoring test/hold-out set
2024-11-30 17:03:28,514:INFO:Visual Rendered Successfully
2024-11-30 17:03:28,626:INFO:plot_model() successfully completed......................................
2024-11-30 17:06:07,312:INFO:Initializing create_model()
2024-11-30 17:06:07,313:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:06:07,313:INFO:Checking exceptions
2024-11-30 17:06:07,461:INFO:Importing libraries
2024-11-30 17:06:07,464:INFO:Copying training dataset
2024-11-30 17:06:07,481:INFO:Defining folds
2024-11-30 17:06:07,482:INFO:Declaring metric variables
2024-11-30 17:06:07,498:INFO:Importing untrained model
2024-11-30 17:06:07,521:INFO:Logistic Regression Imported successfully
2024-11-30 17:06:07,584:INFO:Starting cross validation
2024-11-30 17:06:07,584:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:06:07,808:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,819:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,824:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,826:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,836:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,840:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,841:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,843:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,851:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,855:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,855:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,857:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,953:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,968:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:07,970:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:08,004:INFO:Calculating mean and std
2024-11-30 17:06:08,004:INFO:Creating metrics dataframe
2024-11-30 17:06:08,017:INFO:Finalizing model
2024-11-30 17:06:08,070:INFO:Uploading results into container
2024-11-30 17:06:08,070:INFO:Uploading model into container now
2024-11-30 17:06:08,101:INFO:_master_model_container: 4
2024-11-30 17:06:08,101:INFO:_display_container: 5
2024-11-30 17:06:08,103:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:06:08,103:INFO:create_model() successfully completed......................................
2024-11-30 17:06:19,768:INFO:Initializing tune_model()
2024-11-30 17:06:19,768:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>)
2024-11-30 17:06:19,769:INFO:Checking exceptions
2024-11-30 17:06:19,901:INFO:Copying training dataset
2024-11-30 17:06:19,909:INFO:Checking base model
2024-11-30 17:06:19,909:INFO:Base model : Logistic Regression
2024-11-30 17:06:19,923:INFO:Declaring metric variables
2024-11-30 17:06:19,938:INFO:Defining Hyperparameters
2024-11-30 17:06:20,179:INFO:Tuning with n_jobs=-1
2024-11-30 17:06:20,180:INFO:Initializing RandomizedSearchCV
2024-11-30 17:06:21,962:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 17:06:21,966:INFO:Hyperparameter search completed
2024-11-30 17:06:21,966:INFO:SubProcess create_model() called ==================================
2024-11-30 17:06:21,969:INFO:Initializing create_model()
2024-11-30 17:06:21,969:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D8FE853340>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 17:06:21,969:INFO:Checking exceptions
2024-11-30 17:06:21,969:INFO:Importing libraries
2024-11-30 17:06:21,970:INFO:Copying training dataset
2024-11-30 17:06:21,984:INFO:Defining folds
2024-11-30 17:06:21,984:INFO:Declaring metric variables
2024-11-30 17:06:21,993:INFO:Importing untrained model
2024-11-30 17:06:21,993:INFO:Declaring custom model
2024-11-30 17:06:22,006:INFO:Logistic Regression Imported successfully
2024-11-30 17:06:22,033:INFO:Starting cross validation
2024-11-30 17:06:22,038:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:06:22,210:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,221:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,228:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,238:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,238:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,247:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,255:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,258:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,258:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,275:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,276:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,293:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,410:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,433:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,444:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,478:INFO:Calculating mean and std
2024-11-30 17:06:22,485:INFO:Creating metrics dataframe
2024-11-30 17:06:22,504:INFO:Finalizing model
2024-11-30 17:06:22,570:INFO:Uploading results into container
2024-11-30 17:06:22,572:INFO:Uploading model into container now
2024-11-30 17:06:22,573:INFO:_master_model_container: 5
2024-11-30 17:06:22,573:INFO:_display_container: 6
2024-11-30 17:06:22,576:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:06:22,577:INFO:create_model() successfully completed......................................
2024-11-30 17:06:22,701:INFO:SubProcess create_model() end ==================================
2024-11-30 17:06:22,702:INFO:choose_better activated
2024-11-30 17:06:22,710:INFO:SubProcess create_model() called ==================================
2024-11-30 17:06:22,711:INFO:Initializing create_model()
2024-11-30 17:06:22,711:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:06:22,712:INFO:Checking exceptions
2024-11-30 17:06:22,719:INFO:Importing libraries
2024-11-30 17:06:22,719:INFO:Copying training dataset
2024-11-30 17:06:22,728:INFO:Defining folds
2024-11-30 17:06:22,728:INFO:Declaring metric variables
2024-11-30 17:06:22,728:INFO:Importing untrained model
2024-11-30 17:06:22,728:INFO:Declaring custom model
2024-11-30 17:06:22,732:INFO:Logistic Regression Imported successfully
2024-11-30 17:06:22,733:INFO:Starting cross validation
2024-11-30 17:06:22,739:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:06:22,919:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,923:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,936:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,938:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,939:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,952:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,956:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,961:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,969:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,987:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:22,989:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:23,003:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:23,078:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:23,090:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:23,100:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:23,128:INFO:Calculating mean and std
2024-11-30 17:06:23,131:INFO:Creating metrics dataframe
2024-11-30 17:06:23,135:INFO:Finalizing model
2024-11-30 17:06:23,184:INFO:Uploading results into container
2024-11-30 17:06:23,186:INFO:Uploading model into container now
2024-11-30 17:06:23,187:INFO:_master_model_container: 6
2024-11-30 17:06:23,187:INFO:_display_container: 7
2024-11-30 17:06:23,188:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:06:23,188:INFO:create_model() successfully completed......................................
2024-11-30 17:06:23,304:INFO:SubProcess create_model() end ==================================
2024-11-30 17:06:23,306:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:06:23,307:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:06:23,308:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 17:06:23,308:INFO:choose_better completed
2024-11-30 17:06:23,309:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 17:06:23,340:INFO:_master_model_container: 6
2024-11-30 17:06:23,340:INFO:_display_container: 6
2024-11-30 17:06:23,342:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:06:23,342:INFO:tune_model() successfully completed......................................
2024-11-30 17:06:48,842:INFO:Initializing create_model()
2024-11-30 17:06:48,842:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:06:48,843:INFO:Checking exceptions
2024-11-30 17:06:49,017:INFO:Importing libraries
2024-11-30 17:06:49,018:INFO:Copying training dataset
2024-11-30 17:06:49,034:INFO:Defining folds
2024-11-30 17:06:49,034:INFO:Declaring metric variables
2024-11-30 17:06:49,049:INFO:Importing untrained model
2024-11-30 17:06:49,073:INFO:Logistic Regression Imported successfully
2024-11-30 17:06:49,098:INFO:Starting cross validation
2024-11-30 17:06:49,108:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:06:49,256:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,272:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,273:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,273:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,273:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,300:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,300:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,300:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,306:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,310:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,318:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,330:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,410:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,410:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,426:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:49,459:INFO:Calculating mean and std
2024-11-30 17:06:49,461:INFO:Creating metrics dataframe
2024-11-30 17:06:49,481:INFO:Finalizing model
2024-11-30 17:06:49,554:INFO:Uploading results into container
2024-11-30 17:06:49,557:INFO:Uploading model into container now
2024-11-30 17:06:49,588:INFO:_master_model_container: 7
2024-11-30 17:06:49,588:INFO:_display_container: 7
2024-11-30 17:06:49,591:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:06:49,592:INFO:create_model() successfully completed......................................
2024-11-30 17:06:53,571:INFO:Initializing predict_model()
2024-11-30 17:06:53,571:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D8826FD160>)
2024-11-30 17:06:53,571:INFO:Checking exceptions
2024-11-30 17:06:53,572:INFO:Preloading libraries
2024-11-30 17:06:53,688:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:53,705:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:53,705:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:06:59,090:INFO:Initializing plot_model()
2024-11-30 17:06:59,091:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:06:59,091:INFO:Checking exceptions
2024-11-30 17:06:59,107:INFO:Preloading libraries
2024-11-30 17:06:59,107:INFO:Copying training dataset
2024-11-30 17:06:59,108:INFO:Plot type: confusion_matrix
2024-11-30 17:06:59,442:INFO:Fitting Model
2024-11-30 17:06:59,442:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:06:59,454:INFO:Scoring test/hold-out set
2024-11-30 17:06:59,786:INFO:Visual Rendered Successfully
2024-11-30 17:06:59,922:INFO:plot_model() successfully completed......................................
2024-11-30 17:07:04,192:INFO:Initializing tune_model()
2024-11-30 17:07:04,192:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>)
2024-11-30 17:07:04,193:INFO:Checking exceptions
2024-11-30 17:07:04,338:INFO:Copying training dataset
2024-11-30 17:07:04,356:INFO:Checking base model
2024-11-30 17:07:04,356:INFO:Base model : Logistic Regression
2024-11-30 17:07:04,440:INFO:Declaring metric variables
2024-11-30 17:07:04,456:INFO:Defining Hyperparameters
2024-11-30 17:07:04,605:INFO:Tuning with n_jobs=-1
2024-11-30 17:07:04,606:INFO:Initializing RandomizedSearchCV
2024-11-30 17:07:06,577:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 17:07:06,580:INFO:Hyperparameter search completed
2024-11-30 17:07:06,581:INFO:SubProcess create_model() called ==================================
2024-11-30 17:07:06,586:INFO:Initializing create_model()
2024-11-30 17:07:06,587:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D8F767C250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 17:07:06,587:INFO:Checking exceptions
2024-11-30 17:07:06,588:INFO:Importing libraries
2024-11-30 17:07:06,589:INFO:Copying training dataset
2024-11-30 17:07:06,599:INFO:Defining folds
2024-11-30 17:07:06,600:INFO:Declaring metric variables
2024-11-30 17:07:06,613:INFO:Importing untrained model
2024-11-30 17:07:06,614:INFO:Declaring custom model
2024-11-30 17:07:06,627:INFO:Logistic Regression Imported successfully
2024-11-30 17:07:06,657:INFO:Starting cross validation
2024-11-30 17:07:06,660:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:07:06,838:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,844:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,847:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,857:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,861:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,864:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,873:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,877:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,880:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,880:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,897:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,913:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:06,993:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,005:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,013:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,038:INFO:Calculating mean and std
2024-11-30 17:07:07,042:INFO:Creating metrics dataframe
2024-11-30 17:07:07,060:INFO:Finalizing model
2024-11-30 17:07:07,126:INFO:Uploading results into container
2024-11-30 17:07:07,128:INFO:Uploading model into container now
2024-11-30 17:07:07,129:INFO:_master_model_container: 8
2024-11-30 17:07:07,129:INFO:_display_container: 9
2024-11-30 17:07:07,132:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:07:07,132:INFO:create_model() successfully completed......................................
2024-11-30 17:07:07,263:INFO:SubProcess create_model() end ==================================
2024-11-30 17:07:07,264:INFO:choose_better activated
2024-11-30 17:07:07,276:INFO:SubProcess create_model() called ==================================
2024-11-30 17:07:07,278:INFO:Initializing create_model()
2024-11-30 17:07:07,278:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:07:07,279:INFO:Checking exceptions
2024-11-30 17:07:07,287:INFO:Importing libraries
2024-11-30 17:07:07,287:INFO:Copying training dataset
2024-11-30 17:07:07,304:INFO:Defining folds
2024-11-30 17:07:07,304:INFO:Declaring metric variables
2024-11-30 17:07:07,305:INFO:Importing untrained model
2024-11-30 17:07:07,305:INFO:Declaring custom model
2024-11-30 17:07:07,311:INFO:Logistic Regression Imported successfully
2024-11-30 17:07:07,312:INFO:Starting cross validation
2024-11-30 17:07:07,318:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:07:07,494:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,496:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,504:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,506:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,506:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,506:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,516:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,524:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,526:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,526:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,536:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,536:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,628:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,636:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,643:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:07:07,668:INFO:Calculating mean and std
2024-11-30 17:07:07,669:INFO:Creating metrics dataframe
2024-11-30 17:07:07,674:INFO:Finalizing model
2024-11-30 17:07:07,704:INFO:Uploading results into container
2024-11-30 17:07:07,704:INFO:Uploading model into container now
2024-11-30 17:07:07,704:INFO:_master_model_container: 9
2024-11-30 17:07:07,704:INFO:_display_container: 10
2024-11-30 17:07:07,704:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:07:07,704:INFO:create_model() successfully completed......................................
2024-11-30 17:07:07,820:INFO:SubProcess create_model() end ==================================
2024-11-30 17:07:07,820:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:07:07,820:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:07:07,820:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 17:07:07,820:INFO:choose_better completed
2024-11-30 17:07:07,820:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 17:07:07,877:INFO:_master_model_container: 9
2024-11-30 17:07:07,877:INFO:_display_container: 9
2024-11-30 17:07:07,877:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:07:07,886:INFO:tune_model() successfully completed......................................
2024-11-30 17:08:19,290:INFO:Initializing create_model()
2024-11-30 17:08:19,290:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:08:19,290:INFO:Checking exceptions
2024-11-30 17:08:19,436:INFO:Importing libraries
2024-11-30 17:08:19,437:INFO:Copying training dataset
2024-11-30 17:08:19,456:INFO:Defining folds
2024-11-30 17:08:19,456:INFO:Declaring metric variables
2024-11-30 17:08:19,481:INFO:Importing untrained model
2024-11-30 17:08:19,562:INFO:Logistic Regression Imported successfully
2024-11-30 17:08:19,639:INFO:Starting cross validation
2024-11-30 17:08:19,645:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:08:19,837:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,842:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,855:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,856:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,867:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,871:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,872:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,881:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,882:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,895:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,897:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:19,911:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:20,004:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:20,019:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:20,032:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:20,082:INFO:Calculating mean and std
2024-11-30 17:08:20,082:INFO:Creating metrics dataframe
2024-11-30 17:08:20,099:INFO:Finalizing model
2024-11-30 17:08:20,185:INFO:Uploading results into container
2024-11-30 17:08:20,188:INFO:Uploading model into container now
2024-11-30 17:08:20,238:INFO:_master_model_container: 10
2024-11-30 17:08:20,238:INFO:_display_container: 10
2024-11-30 17:08:20,240:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:08:20,241:INFO:create_model() successfully completed......................................
2024-11-30 17:08:31,339:INFO:Initializing predict_model()
2024-11-30 17:08:31,339:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D8FEC65EE0>)
2024-11-30 17:08:31,340:INFO:Checking exceptions
2024-11-30 17:08:31,340:INFO:Preloading libraries
2024-11-30 17:08:31,464:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:31,483:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:31,490:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:08:39,929:INFO:Initializing plot_model()
2024-11-30 17:08:39,929:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:08:39,930:INFO:Checking exceptions
2024-11-30 17:08:39,940:INFO:Preloading libraries
2024-11-30 17:08:39,941:INFO:Copying training dataset
2024-11-30 17:08:39,941:INFO:Plot type: confusion_matrix
2024-11-30 17:08:40,093:INFO:Fitting Model
2024-11-30 17:08:40,093:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:08:40,094:INFO:Scoring test/hold-out set
2024-11-30 17:08:40,397:INFO:Visual Rendered Successfully
2024-11-30 17:08:40,542:INFO:plot_model() successfully completed......................................
2024-11-30 17:10:37,766:INFO:Initializing tune_model()
2024-11-30 17:10:37,767:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>)
2024-11-30 17:10:37,767:INFO:Checking exceptions
2024-11-30 17:10:37,900:INFO:Copying training dataset
2024-11-30 17:10:37,911:INFO:Checking base model
2024-11-30 17:10:37,911:INFO:Base model : Logistic Regression
2024-11-30 17:10:37,923:INFO:Declaring metric variables
2024-11-30 17:10:37,942:INFO:Defining Hyperparameters
2024-11-30 17:10:38,180:INFO:Tuning with n_jobs=-1
2024-11-30 17:10:38,180:INFO:Initializing RandomizedSearchCV
2024-11-30 17:10:40,074:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 17:10:40,078:INFO:Hyperparameter search completed
2024-11-30 17:10:40,078:INFO:SubProcess create_model() called ==================================
2024-11-30 17:10:40,081:INFO:Initializing create_model()
2024-11-30 17:10:40,082:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D8FE2A9130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 17:10:40,083:INFO:Checking exceptions
2024-11-30 17:10:40,084:INFO:Importing libraries
2024-11-30 17:10:40,084:INFO:Copying training dataset
2024-11-30 17:10:40,094:INFO:Defining folds
2024-11-30 17:10:40,095:INFO:Declaring metric variables
2024-11-30 17:10:40,105:INFO:Importing untrained model
2024-11-30 17:10:40,106:INFO:Declaring custom model
2024-11-30 17:10:40,119:INFO:Logistic Regression Imported successfully
2024-11-30 17:10:40,146:INFO:Starting cross validation
2024-11-30 17:10:40,153:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:10:40,317:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,321:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,330:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,332:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,335:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,345:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,349:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,350:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,354:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,361:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,365:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,380:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,469:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,476:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,486:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,513:INFO:Calculating mean and std
2024-11-30 17:10:40,517:INFO:Creating metrics dataframe
2024-11-30 17:10:40,538:INFO:Finalizing model
2024-11-30 17:10:40,599:INFO:Uploading results into container
2024-11-30 17:10:40,601:INFO:Uploading model into container now
2024-11-30 17:10:40,602:INFO:_master_model_container: 11
2024-11-30 17:10:40,602:INFO:_display_container: 12
2024-11-30 17:10:40,604:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:10:40,604:INFO:create_model() successfully completed......................................
2024-11-30 17:10:40,725:INFO:SubProcess create_model() end ==================================
2024-11-30 17:10:40,725:INFO:choose_better activated
2024-11-30 17:10:40,738:INFO:SubProcess create_model() called ==================================
2024-11-30 17:10:40,740:INFO:Initializing create_model()
2024-11-30 17:10:40,740:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:10:40,740:INFO:Checking exceptions
2024-11-30 17:10:40,748:INFO:Importing libraries
2024-11-30 17:10:40,749:INFO:Copying training dataset
2024-11-30 17:10:40,768:INFO:Defining folds
2024-11-30 17:10:40,768:INFO:Declaring metric variables
2024-11-30 17:10:40,769:INFO:Importing untrained model
2024-11-30 17:10:40,770:INFO:Declaring custom model
2024-11-30 17:10:40,772:INFO:Logistic Regression Imported successfully
2024-11-30 17:10:40,773:INFO:Starting cross validation
2024-11-30 17:10:40,778:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:10:40,947:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,950:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,958:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,962:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,966:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,975:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,976:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,982:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,983:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:40,990:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:41,002:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:41,017:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:41,085:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:41,091:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:41,102:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:10:41,123:INFO:Calculating mean and std
2024-11-30 17:10:41,124:INFO:Creating metrics dataframe
2024-11-30 17:10:41,130:INFO:Finalizing model
2024-11-30 17:10:41,169:INFO:Uploading results into container
2024-11-30 17:10:41,170:INFO:Uploading model into container now
2024-11-30 17:10:41,171:INFO:_master_model_container: 12
2024-11-30 17:10:41,171:INFO:_display_container: 13
2024-11-30 17:10:41,173:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:10:41,173:INFO:create_model() successfully completed......................................
2024-11-30 17:10:41,278:INFO:SubProcess create_model() end ==================================
2024-11-30 17:10:41,278:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:10:41,278:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:10:41,278:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 17:10:41,278:INFO:choose_better completed
2024-11-30 17:10:41,278:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 17:10:41,318:INFO:_master_model_container: 12
2024-11-30 17:10:41,318:INFO:_display_container: 12
2024-11-30 17:10:41,320:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:10:41,320:INFO:tune_model() successfully completed......................................
2024-11-30 17:11:49,533:INFO:Initializing predict_model()
2024-11-30 17:11:49,533:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D8FEC5AA60>)
2024-11-30 17:11:49,533:INFO:Checking exceptions
2024-11-30 17:11:49,533:INFO:Preloading libraries
2024-11-30 17:11:49,772:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:11:49,780:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:11:49,787:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:12:40,152:INFO:Initializing plot_model()
2024-11-30 17:12:40,152:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:12:40,153:INFO:Checking exceptions
2024-11-30 17:12:40,172:INFO:Preloading libraries
2024-11-30 17:12:40,179:INFO:Copying training dataset
2024-11-30 17:12:40,179:INFO:Plot type: feature
2024-11-30 17:12:40,664:INFO:Visual Rendered Successfully
2024-11-30 17:12:40,781:INFO:plot_model() successfully completed......................................
2024-11-30 17:13:21,757:INFO:Initializing plot_model()
2024-11-30 17:13:21,757:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, system=True)
2024-11-30 17:13:21,758:INFO:Checking exceptions
2024-11-30 17:13:21,772:INFO:Preloading libraries
2024-11-30 17:13:21,773:INFO:Copying training dataset
2024-11-30 17:13:21,773:INFO:Plot type: feature
2024-11-30 17:13:22,188:INFO:Visual Rendered Successfully
2024-11-30 17:13:22,285:INFO:plot_model() successfully completed......................................
2024-11-30 17:15:36,769:INFO:Initializing finalize_model()
2024-11-30 17:15:36,770:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-30 17:15:36,772:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:15:36,788:INFO:Initializing create_model()
2024-11-30 17:15:36,788:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D8FE58BCA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:15:36,788:INFO:Checking exceptions
2024-11-30 17:15:36,799:INFO:Importing libraries
2024-11-30 17:15:36,800:INFO:Copying training dataset
2024-11-30 17:15:36,800:INFO:Defining folds
2024-11-30 17:15:36,800:INFO:Declaring metric variables
2024-11-30 17:15:36,801:INFO:Importing untrained model
2024-11-30 17:15:36,801:INFO:Declaring custom model
2024-11-30 17:15:36,803:INFO:Logistic Regression Imported successfully
2024-11-30 17:15:36,806:INFO:Cross validation set to False
2024-11-30 17:15:36,806:INFO:Fitting Model
2024-11-30 17:15:36,860:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 17:15:36,860:INFO:create_model() successfully completed......................................
2024-11-30 17:15:36,985:INFO:_master_model_container: 12
2024-11-30 17:15:36,986:INFO:_display_container: 13
2024-11-30 17:15:37,013:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 17:15:37,013:INFO:finalize_model() successfully completed......................................
2024-11-30 17:17:02,433:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:22:22,643:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:33:06,619:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:33:26,958:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:33:28,572:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:33:29,328:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:33:30,479:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:35:58,977:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 17:35:58,977:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 17:35:58,977:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 17:35:58,977:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 17:35:59,839:INFO:PyCaret ClassificationExperiment
2024-11-30 17:35:59,839:INFO:Logging name: clf-default-name
2024-11-30 17:35:59,839:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-30 17:35:59,839:INFO:version 3.3.2
2024-11-30 17:35:59,839:INFO:Initializing setup()
2024-11-30 17:35:59,839:INFO:self.USI: 680c
2024-11-30 17:35:59,839:INFO:self._variable_keys: {'target_param', 'pipeline', 'n_jobs_param', 'data', 'X', 'fold_shuffle_param', 'exp_id', 'logging_param', 'X_train', 'seed', 'y_test', 'memory', 'gpu_param', 'log_plots_param', 'is_multiclass', '_available_plots', '_ml_usecase', 'fold_groups_param', 'idx', 'X_test', 'USI', 'y_train', 'html_param', 'exp_name_log', 'y', 'fix_imbalance', 'gpu_n_jobs_param', 'fold_generator'}
2024-11-30 17:35:59,839:INFO:Checking environment
2024-11-30 17:35:59,839:INFO:python_version: 3.9.12
2024-11-30 17:35:59,839:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2024-11-30 17:35:59,840:INFO:machine: AMD64
2024-11-30 17:35:59,840:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-30 17:35:59,844:INFO:Memory: svmem(total=8481583104, available=1462865920, percent=82.8, used=7018717184, free=1462865920)
2024-11-30 17:35:59,844:INFO:Physical Core: 2
2024-11-30 17:35:59,844:INFO:Logical Core: 4
2024-11-30 17:35:59,844:INFO:Checking libraries
2024-11-30 17:35:59,844:INFO:System:
2024-11-30 17:35:59,844:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2024-11-30 17:35:59,844:INFO:executable: c:\Users\Administrateur\anaconda3\python.exe
2024-11-30 17:35:59,844:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-30 17:35:59,844:INFO:PyCaret required dependencies:
2024-11-30 17:36:00,156:INFO:                 pip: 21.2.4
2024-11-30 17:36:00,156:INFO:          setuptools: 61.2.0
2024-11-30 17:36:00,156:INFO:             pycaret: 3.3.2
2024-11-30 17:36:00,156:INFO:             IPython: 8.2.0
2024-11-30 17:36:00,156:INFO:          ipywidgets: 7.6.5
2024-11-30 17:36:00,156:INFO:                tqdm: 4.64.0
2024-11-30 17:36:00,156:INFO:               numpy: 1.21.6
2024-11-30 17:36:00,156:INFO:              pandas: 1.4.2
2024-11-30 17:36:00,156:INFO:              jinja2: 2.11.3
2024-11-30 17:36:00,156:INFO:               scipy: 1.7.3
2024-11-30 17:36:00,156:INFO:              joblib: 1.1.0
2024-11-30 17:36:00,156:INFO:             sklearn: 1.0.2
2024-11-30 17:36:00,156:INFO:                pyod: 2.0.2
2024-11-30 17:36:00,156:INFO:            imblearn: 0.12.4
2024-11-30 17:36:00,156:INFO:   category_encoders: 2.6.4
2024-11-30 17:36:00,156:INFO:            lightgbm: 4.5.0
2024-11-30 17:36:00,156:INFO:               numba: 0.55.1
2024-11-30 17:36:00,156:INFO:            requests: 2.27.1
2024-11-30 17:36:00,156:INFO:          matplotlib: 3.5.1
2024-11-30 17:36:00,157:INFO:          scikitplot: 0.3.7
2024-11-30 17:36:00,157:INFO:         yellowbrick: 1.5
2024-11-30 17:36:00,157:INFO:              plotly: 5.6.0
2024-11-30 17:36:00,157:INFO:    plotly-resampler: Not installed
2024-11-30 17:36:00,157:INFO:             kaleido: 0.2.1
2024-11-30 17:36:00,157:INFO:           schemdraw: 0.15
2024-11-30 17:36:00,157:INFO:         statsmodels: 0.13.2
2024-11-30 17:36:00,157:INFO:              sktime: 0.26.0
2024-11-30 17:36:00,157:INFO:               tbats: 1.1.3
2024-11-30 17:36:00,157:INFO:            pmdarima: 2.0.4
2024-11-30 17:36:00,157:INFO:              psutil: 5.8.0
2024-11-30 17:36:00,158:INFO:          markupsafe: 2.0.1
2024-11-30 17:36:00,158:INFO:             pickle5: Not installed
2024-11-30 17:36:00,158:INFO:         cloudpickle: 2.0.0
2024-11-30 17:36:00,158:INFO:         deprecation: 2.1.0
2024-11-30 17:36:00,158:INFO:              xxhash: 3.5.0
2024-11-30 17:36:00,158:INFO:           wurlitzer: Not installed
2024-11-30 17:36:00,158:INFO:PyCaret optional dependencies:
2024-11-30 17:36:01,125:INFO:                shap: Not installed
2024-11-30 17:36:01,126:INFO:           interpret: Not installed
2024-11-30 17:36:01,126:INFO:                umap: Not installed
2024-11-30 17:36:01,126:INFO:     ydata_profiling: Not installed
2024-11-30 17:36:01,126:INFO:  explainerdashboard: Not installed
2024-11-30 17:36:01,126:INFO:             autoviz: Not installed
2024-11-30 17:36:01,126:INFO:           fairlearn: Not installed
2024-11-30 17:36:01,126:INFO:          deepchecks: Not installed
2024-11-30 17:36:01,126:INFO:             xgboost: Not installed
2024-11-30 17:36:01,126:INFO:            catboost: Not installed
2024-11-30 17:36:01,126:INFO:              kmodes: Not installed
2024-11-30 17:36:01,126:INFO:             mlxtend: Not installed
2024-11-30 17:36:01,126:INFO:       statsforecast: Not installed
2024-11-30 17:36:01,126:INFO:        tune_sklearn: Not installed
2024-11-30 17:36:01,127:INFO:                 ray: Not installed
2024-11-30 17:36:01,127:INFO:            hyperopt: Not installed
2024-11-30 17:36:01,127:INFO:              optuna: Not installed
2024-11-30 17:36:01,127:INFO:               skopt: Not installed
2024-11-30 17:36:01,127:INFO:              mlflow: Not installed
2024-11-30 17:36:01,127:INFO:              gradio: Not installed
2024-11-30 17:36:01,127:INFO:             fastapi: 0.115.5
2024-11-30 17:36:01,127:INFO:             uvicorn: Not installed
2024-11-30 17:36:01,127:INFO:              m2cgen: Not installed
2024-11-30 17:36:01,127:INFO:           evidently: Not installed
2024-11-30 17:36:01,127:INFO:               fugue: Not installed
2024-11-30 17:36:01,127:INFO:           streamlit: Not installed
2024-11-30 17:36:01,127:INFO:             prophet: Not installed
2024-11-30 17:36:01,127:INFO:None
2024-11-30 17:36:01,127:INFO:Set up data.
2024-11-30 17:36:01,135:INFO:Set up folding strategy.
2024-11-30 17:36:01,135:INFO:Set up train/test split.
2024-11-30 17:36:01,259:INFO:Set up index.
2024-11-30 17:36:01,259:INFO:Assigning column types.
2024-11-30 17:36:01,263:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-30 17:36:01,323:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 17:36:01,329:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 17:36:01,377:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,377:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,433:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 17:36:01,434:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 17:36:01,471:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,471:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,472:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-30 17:36:01,530:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 17:36:01,564:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,565:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,619:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 17:36:01,653:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,653:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,654:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-30 17:36:01,744:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,744:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,836:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,836:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:01,838:INFO:Preparing preprocessing pipeline...
2024-11-30 17:36:01,840:INFO:Set up label encoding.
2024-11-30 17:36:01,840:INFO:Set up simple imputation.
2024-11-30 17:36:01,840:INFO:Set up feature normalization.
2024-11-30 17:36:01,913:INFO:Finished creating preprocessing pipeline.
2024-11-30 17:36:01,921:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-11-30 17:36:01,921:INFO:Creating final display dataframe.
2024-11-30 17:36:01,993:INFO:Setup _display_container:                     Description                     Value
0                    Session id                      2024
1                        Target                   diabete
2                   Target type                    Binary
3                Target mapping  negative: 0, positive: 1
4           Original data shape                  (724, 5)
5        Transformed data shape                  (724, 5)
6   Transformed train set shape                  (506, 5)
7    Transformed test set shape                  (218, 5)
8              Numeric features                         4
9                    Preprocess                      True
10              Imputation type                    simple
11           Numeric imputation                      mean
12       Categorical imputation                      mode
13                    Normalize                      True
14             Normalize method                    zscore
15               Fold Generator           StratifiedKFold
16                  Fold Number                         5
17                     CPU Jobs                        -1
18                      Use GPU                     False
19               Log Experiment                     False
20              Experiment Name          clf-default-name
21                          USI                      680c
2024-11-30 17:36:02,112:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:02,112:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:02,223:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:02,223:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:02,225:INFO:setup() successfully completed in 2.39s...............
2024-11-30 17:36:02,247:INFO:gpu_param set to False
2024-11-30 17:36:02,363:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:02,363:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:02,455:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:02,456:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:36:02,475:INFO:Initializing create_model()
2024-11-30 17:36:02,476:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:36:02,476:INFO:Checking exceptions
2024-11-30 17:36:02,561:INFO:Importing libraries
2024-11-30 17:36:02,562:INFO:Copying training dataset
2024-11-30 17:36:02,580:INFO:Defining folds
2024-11-30 17:36:02,581:INFO:Declaring metric variables
2024-11-30 17:36:02,590:INFO:Importing untrained model
2024-11-30 17:36:02,601:INFO:Logistic Regression Imported successfully
2024-11-30 17:36:02,621:INFO:Starting cross validation
2024-11-30 17:36:02,626:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:36:15,682:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,691:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,695:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,698:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,703:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,711:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,735:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,743:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,749:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,925:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,932:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:15,939:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:16,111:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:16,115:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:16,120:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:16,145:INFO:Calculating mean and std
2024-11-30 17:36:16,148:INFO:Creating metrics dataframe
2024-11-30 17:36:16,157:INFO:Finalizing model
2024-11-30 17:36:16,209:INFO:Uploading results into container
2024-11-30 17:36:16,211:INFO:Uploading model into container now
2024-11-30 17:36:16,233:INFO:_master_model_container: 1
2024-11-30 17:36:16,233:INFO:_display_container: 2
2024-11-30 17:36:16,235:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:36:16,235:INFO:create_model() successfully completed......................................
2024-11-30 17:36:16,450:INFO:Initializing predict_model()
2024-11-30 17:36:16,450:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F342C7B280>)
2024-11-30 17:36:16,450:INFO:Checking exceptions
2024-11-30 17:36:16,450:INFO:Preloading libraries
2024-11-30 17:36:16,538:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:16,544:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:16,548:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:16,735:INFO:Initializing plot_model()
2024-11-30 17:36:16,735:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, system=True)
2024-11-30 17:36:16,736:INFO:Checking exceptions
2024-11-30 17:36:16,749:INFO:Preloading libraries
2024-11-30 17:36:16,750:INFO:Copying training dataset
2024-11-30 17:36:16,750:INFO:Plot type: confusion_matrix
2024-11-30 17:36:16,834:INFO:Fitting Model
2024-11-30 17:36:16,835:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:36:16,836:INFO:Scoring test/hold-out set
2024-11-30 17:36:17,017:INFO:Visual Rendered Successfully
2024-11-30 17:36:17,145:INFO:plot_model() successfully completed......................................
2024-11-30 17:36:17,168:INFO:Initializing tune_model()
2024-11-30 17:36:17,169:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>)
2024-11-30 17:36:17,169:INFO:Checking exceptions
2024-11-30 17:36:17,227:INFO:Copying training dataset
2024-11-30 17:36:17,238:INFO:Checking base model
2024-11-30 17:36:17,239:INFO:Base model : Logistic Regression
2024-11-30 17:36:17,246:INFO:Declaring metric variables
2024-11-30 17:36:17,256:INFO:Defining Hyperparameters
2024-11-30 17:36:17,383:INFO:Tuning with n_jobs=-1
2024-11-30 17:36:17,384:INFO:Initializing RandomizedSearchCV
2024-11-30 17:36:18,315:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 17:36:18,317:INFO:Hyperparameter search completed
2024-11-30 17:36:18,317:INFO:SubProcess create_model() called ==================================
2024-11-30 17:36:18,318:INFO:Initializing create_model()
2024-11-30 17:36:18,318:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F34AA19100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 17:36:18,318:INFO:Checking exceptions
2024-11-30 17:36:18,318:INFO:Importing libraries
2024-11-30 17:36:18,319:INFO:Copying training dataset
2024-11-30 17:36:18,328:INFO:Defining folds
2024-11-30 17:36:18,328:INFO:Declaring metric variables
2024-11-30 17:36:18,331:INFO:Importing untrained model
2024-11-30 17:36:18,332:INFO:Declaring custom model
2024-11-30 17:36:18,338:INFO:Logistic Regression Imported successfully
2024-11-30 17:36:18,349:INFO:Starting cross validation
2024-11-30 17:36:18,351:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:36:18,424:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,428:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,431:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,432:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,437:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,440:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,440:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,444:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,446:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,460:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,463:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,467:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,494:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,499:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,540:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,562:INFO:Calculating mean and std
2024-11-30 17:36:18,566:INFO:Creating metrics dataframe
2024-11-30 17:36:18,578:INFO:Finalizing model
2024-11-30 17:36:18,631:INFO:Uploading results into container
2024-11-30 17:36:18,639:INFO:Uploading model into container now
2024-11-30 17:36:18,640:INFO:_master_model_container: 2
2024-11-30 17:36:18,640:INFO:_display_container: 4
2024-11-30 17:36:18,642:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:36:18,642:INFO:create_model() successfully completed......................................
2024-11-30 17:36:18,794:INFO:SubProcess create_model() end ==================================
2024-11-30 17:36:18,794:INFO:choose_better activated
2024-11-30 17:36:18,799:INFO:SubProcess create_model() called ==================================
2024-11-30 17:36:18,800:INFO:Initializing create_model()
2024-11-30 17:36:18,800:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:36:18,800:INFO:Checking exceptions
2024-11-30 17:36:18,805:INFO:Importing libraries
2024-11-30 17:36:18,805:INFO:Copying training dataset
2024-11-30 17:36:18,811:INFO:Defining folds
2024-11-30 17:36:18,811:INFO:Declaring metric variables
2024-11-30 17:36:18,811:INFO:Importing untrained model
2024-11-30 17:36:18,811:INFO:Declaring custom model
2024-11-30 17:36:18,812:INFO:Logistic Regression Imported successfully
2024-11-30 17:36:18,813:INFO:Starting cross validation
2024-11-30 17:36:18,814:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:36:18,899:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,908:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,918:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,927:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,932:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,937:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,944:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,951:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,953:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,959:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,961:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:18,968:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:19,017:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:19,025:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:19,030:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:19,043:INFO:Calculating mean and std
2024-11-30 17:36:19,044:INFO:Creating metrics dataframe
2024-11-30 17:36:19,047:INFO:Finalizing model
2024-11-30 17:36:19,072:INFO:Uploading results into container
2024-11-30 17:36:19,073:INFO:Uploading model into container now
2024-11-30 17:36:19,073:INFO:_master_model_container: 3
2024-11-30 17:36:19,074:INFO:_display_container: 5
2024-11-30 17:36:19,074:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:36:19,074:INFO:create_model() successfully completed......................................
2024-11-30 17:36:19,212:INFO:SubProcess create_model() end ==================================
2024-11-30 17:36:19,213:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:36:19,213:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:36:19,214:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 17:36:19,214:INFO:choose_better completed
2024-11-30 17:36:19,214:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 17:36:19,230:INFO:_master_model_container: 3
2024-11-30 17:36:19,230:INFO:_display_container: 4
2024-11-30 17:36:19,232:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:36:19,232:INFO:tune_model() successfully completed......................................
2024-11-30 17:36:19,453:INFO:Initializing predict_model()
2024-11-30 17:36:19,453:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F34ABA4E50>)
2024-11-30 17:36:19,453:INFO:Checking exceptions
2024-11-30 17:36:19,453:INFO:Preloading libraries
2024-11-30 17:36:19,526:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:19,532:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:19,541:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:36:19,739:INFO:Initializing plot_model()
2024-11-30 17:36:19,739:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, system=True)
2024-11-30 17:36:19,739:INFO:Checking exceptions
2024-11-30 17:36:19,748:INFO:Preloading libraries
2024-11-30 17:36:19,748:INFO:Copying training dataset
2024-11-30 17:36:19,749:INFO:Plot type: feature
2024-11-30 17:36:20,946:INFO:Visual Rendered Successfully
2024-11-30 17:36:21,097:INFO:plot_model() successfully completed......................................
2024-11-30 17:36:21,221:INFO:Initializing finalize_model()
2024-11-30 17:36:21,221:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-30 17:36:21,222:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:36:21,229:INFO:Initializing create_model()
2024-11-30 17:36:21,230:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F3426C03D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:36:21,230:INFO:Checking exceptions
2024-11-30 17:36:21,234:INFO:Importing libraries
2024-11-30 17:36:21,234:INFO:Copying training dataset
2024-11-30 17:36:21,234:INFO:Defining folds
2024-11-30 17:36:21,235:INFO:Declaring metric variables
2024-11-30 17:36:21,235:INFO:Importing untrained model
2024-11-30 17:36:21,236:INFO:Declaring custom model
2024-11-30 17:36:21,237:INFO:Logistic Regression Imported successfully
2024-11-30 17:36:21,239:INFO:Cross validation set to False
2024-11-30 17:36:21,239:INFO:Fitting Model
2024-11-30 17:36:21,318:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 17:36:21,318:INFO:create_model() successfully completed......................................
2024-11-30 17:36:21,470:INFO:_master_model_container: 3
2024-11-30 17:36:21,470:INFO:_display_container: 5
2024-11-30 17:36:21,480:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 17:36:21,480:INFO:finalize_model() successfully completed......................................
2024-11-30 17:36:21,714:INFO:Soft dependency imported: fastapi: 0.115.5
2024-11-30 17:36:21,715:ERROR:
'uvicorn' is a soft dependency and not included in the pycaret installation. Please run: `pip install uvicorn` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:38:30,437:INFO:Soft dependency imported: fastapi: 0.115.5
2024-11-30 17:38:30,437:ERROR:
'uvicorn' is a soft dependency and not included in the pycaret installation. Please run: `pip install uvicorn` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:39:09,758:INFO:Soft dependency imported: fastapi: 0.115.5
2024-11-30 17:39:09,758:ERROR:
'uvicorn' is a soft dependency and not included in the pycaret installation. Please run: `pip install uvicorn` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-11-30 17:39:54,966:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 17:39:54,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 17:39:54,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 17:39:54,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 17:39:55,927:INFO:PyCaret ClassificationExperiment
2024-11-30 17:39:55,928:INFO:Logging name: clf-default-name
2024-11-30 17:39:55,928:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-30 17:39:55,928:INFO:version 3.3.2
2024-11-30 17:39:55,928:INFO:Initializing setup()
2024-11-30 17:39:55,929:INFO:self.USI: 2736
2024-11-30 17:39:55,929:INFO:self._variable_keys: {'X', 'exp_id', 'pipeline', 'gpu_n_jobs_param', 'log_plots_param', 'html_param', 'memory', 'logging_param', 'data', 'fold_shuffle_param', '_available_plots', 'USI', 'seed', 'y_test', 'y', 'fold_generator', 'y_train', 'idx', 'X_train', 'X_test', 'target_param', '_ml_usecase', 'fold_groups_param', 'gpu_param', 'n_jobs_param', 'exp_name_log', 'is_multiclass', 'fix_imbalance'}
2024-11-30 17:39:55,929:INFO:Checking environment
2024-11-30 17:39:55,929:INFO:python_version: 3.9.12
2024-11-30 17:39:55,929:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2024-11-30 17:39:55,929:INFO:machine: AMD64
2024-11-30 17:39:55,929:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-30 17:39:55,935:INFO:Memory: svmem(total=8481583104, available=1649250304, percent=80.6, used=6832332800, free=1649250304)
2024-11-30 17:39:55,935:INFO:Physical Core: 2
2024-11-30 17:39:55,935:INFO:Logical Core: 4
2024-11-30 17:39:55,935:INFO:Checking libraries
2024-11-30 17:39:55,935:INFO:System:
2024-11-30 17:39:55,935:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2024-11-30 17:39:55,935:INFO:executable: c:\Users\Administrateur\anaconda3\python.exe
2024-11-30 17:39:55,935:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-30 17:39:55,935:INFO:PyCaret required dependencies:
2024-11-30 17:39:56,206:INFO:                 pip: 21.2.4
2024-11-30 17:39:56,206:INFO:          setuptools: 61.2.0
2024-11-30 17:39:56,206:INFO:             pycaret: 3.3.2
2024-11-30 17:39:56,207:INFO:             IPython: 8.2.0
2024-11-30 17:39:56,207:INFO:          ipywidgets: 7.6.5
2024-11-30 17:39:56,207:INFO:                tqdm: 4.64.0
2024-11-30 17:39:56,207:INFO:               numpy: 1.21.6
2024-11-30 17:39:56,207:INFO:              pandas: 1.4.2
2024-11-30 17:39:56,207:INFO:              jinja2: 2.11.3
2024-11-30 17:39:56,207:INFO:               scipy: 1.7.3
2024-11-30 17:39:56,207:INFO:              joblib: 1.1.0
2024-11-30 17:39:56,207:INFO:             sklearn: 1.0.2
2024-11-30 17:39:56,207:INFO:                pyod: 2.0.2
2024-11-30 17:39:56,207:INFO:            imblearn: 0.12.4
2024-11-30 17:39:56,207:INFO:   category_encoders: 2.6.4
2024-11-30 17:39:56,207:INFO:            lightgbm: 4.5.0
2024-11-30 17:39:56,207:INFO:               numba: 0.55.1
2024-11-30 17:39:56,207:INFO:            requests: 2.27.1
2024-11-30 17:39:56,207:INFO:          matplotlib: 3.5.1
2024-11-30 17:39:56,207:INFO:          scikitplot: 0.3.7
2024-11-30 17:39:56,207:INFO:         yellowbrick: 1.5
2024-11-30 17:39:56,207:INFO:              plotly: 5.6.0
2024-11-30 17:39:56,208:INFO:    plotly-resampler: Not installed
2024-11-30 17:39:56,208:INFO:             kaleido: 0.2.1
2024-11-30 17:39:56,208:INFO:           schemdraw: 0.15
2024-11-30 17:39:56,208:INFO:         statsmodels: 0.13.2
2024-11-30 17:39:56,208:INFO:              sktime: 0.26.0
2024-11-30 17:39:56,208:INFO:               tbats: 1.1.3
2024-11-30 17:39:56,208:INFO:            pmdarima: 2.0.4
2024-11-30 17:39:56,208:INFO:              psutil: 5.8.0
2024-11-30 17:39:56,208:INFO:          markupsafe: 2.0.1
2024-11-30 17:39:56,208:INFO:             pickle5: Not installed
2024-11-30 17:39:56,208:INFO:         cloudpickle: 2.0.0
2024-11-30 17:39:56,208:INFO:         deprecation: 2.1.0
2024-11-30 17:39:56,208:INFO:              xxhash: 3.5.0
2024-11-30 17:39:56,208:INFO:           wurlitzer: Not installed
2024-11-30 17:39:56,208:INFO:PyCaret optional dependencies:
2024-11-30 17:39:57,117:INFO:                shap: Not installed
2024-11-30 17:39:57,118:INFO:           interpret: Not installed
2024-11-30 17:39:57,118:INFO:                umap: Not installed
2024-11-30 17:39:57,118:INFO:     ydata_profiling: Not installed
2024-11-30 17:39:57,118:INFO:  explainerdashboard: Not installed
2024-11-30 17:39:57,118:INFO:             autoviz: Not installed
2024-11-30 17:39:57,118:INFO:           fairlearn: Not installed
2024-11-30 17:39:57,118:INFO:          deepchecks: Not installed
2024-11-30 17:39:57,118:INFO:             xgboost: Not installed
2024-11-30 17:39:57,118:INFO:            catboost: Not installed
2024-11-30 17:39:57,118:INFO:              kmodes: Not installed
2024-11-30 17:39:57,118:INFO:             mlxtend: Not installed
2024-11-30 17:39:57,118:INFO:       statsforecast: Not installed
2024-11-30 17:39:57,118:INFO:        tune_sklearn: Not installed
2024-11-30 17:39:57,118:INFO:                 ray: Not installed
2024-11-30 17:39:57,118:INFO:            hyperopt: Not installed
2024-11-30 17:39:57,118:INFO:              optuna: Not installed
2024-11-30 17:39:57,118:INFO:               skopt: Not installed
2024-11-30 17:39:57,119:INFO:              mlflow: Not installed
2024-11-30 17:39:57,119:INFO:              gradio: Not installed
2024-11-30 17:39:57,119:INFO:             fastapi: 0.115.5
2024-11-30 17:39:57,119:INFO:             uvicorn: 0.32.1
2024-11-30 17:39:57,119:INFO:              m2cgen: Not installed
2024-11-30 17:39:57,119:INFO:           evidently: Not installed
2024-11-30 17:39:57,119:INFO:               fugue: Not installed
2024-11-30 17:39:57,119:INFO:           streamlit: Not installed
2024-11-30 17:39:57,119:INFO:             prophet: Not installed
2024-11-30 17:39:57,119:INFO:None
2024-11-30 17:39:57,119:INFO:Set up data.
2024-11-30 17:39:57,124:INFO:Set up folding strategy.
2024-11-30 17:39:57,124:INFO:Set up train/test split.
2024-11-30 17:39:57,132:INFO:Set up index.
2024-11-30 17:39:57,133:INFO:Assigning column types.
2024-11-30 17:39:57,137:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-30 17:39:57,199:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 17:39:57,204:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 17:39:57,257:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,257:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,314:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 17:39:57,315:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 17:39:57,357:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,357:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,358:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-30 17:39:57,416:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 17:39:57,452:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,452:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,508:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 17:39:57,542:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,542:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,543:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-30 17:39:57,634:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,726:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,726:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,734:INFO:Preparing preprocessing pipeline...
2024-11-30 17:39:57,736:INFO:Set up label encoding.
2024-11-30 17:39:57,736:INFO:Set up simple imputation.
2024-11-30 17:39:57,736:INFO:Set up feature normalization.
2024-11-30 17:39:57,776:INFO:Finished creating preprocessing pipeline.
2024-11-30 17:39:57,785:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-11-30 17:39:57,785:INFO:Creating final display dataframe.
2024-11-30 17:39:57,843:INFO:Setup _display_container:                     Description                     Value
0                    Session id                      2024
1                        Target                   diabete
2                   Target type                    Binary
3                Target mapping  negative: 0, positive: 1
4           Original data shape                  (724, 5)
5        Transformed data shape                  (724, 5)
6   Transformed train set shape                  (506, 5)
7    Transformed test set shape                  (218, 5)
8              Numeric features                         4
9                    Preprocess                      True
10              Imputation type                    simple
11           Numeric imputation                      mean
12       Categorical imputation                      mode
13                    Normalize                      True
14             Normalize method                    zscore
15               Fold Generator           StratifiedKFold
16                  Fold Number                         5
17                     CPU Jobs                        -1
18                      Use GPU                     False
19               Log Experiment                     False
20              Experiment Name          clf-default-name
21                          USI                      2736
2024-11-30 17:39:57,953:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:57,954:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:58,051:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:58,051:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:58,053:INFO:setup() successfully completed in 2.13s...............
2024-11-30 17:39:58,110:INFO:gpu_param set to False
2024-11-30 17:39:58,212:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:58,214:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:58,304:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:58,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 17:39:58,333:INFO:Initializing create_model()
2024-11-30 17:39:58,334:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:39:58,334:INFO:Checking exceptions
2024-11-30 17:39:58,383:INFO:Importing libraries
2024-11-30 17:39:58,383:INFO:Copying training dataset
2024-11-30 17:39:58,397:INFO:Defining folds
2024-11-30 17:39:58,397:INFO:Declaring metric variables
2024-11-30 17:39:58,488:INFO:Importing untrained model
2024-11-30 17:39:58,506:INFO:Logistic Regression Imported successfully
2024-11-30 17:39:58,522:INFO:Starting cross validation
2024-11-30 17:39:58,525:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:40:12,620:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,628:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,635:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,818:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,827:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,835:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,891:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,898:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,899:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,905:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,905:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:12,913:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:13,102:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:13,106:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:13,112:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:13,130:INFO:Calculating mean and std
2024-11-30 17:40:13,133:INFO:Creating metrics dataframe
2024-11-30 17:40:13,142:INFO:Finalizing model
2024-11-30 17:40:13,184:INFO:Uploading results into container
2024-11-30 17:40:13,186:INFO:Uploading model into container now
2024-11-30 17:40:13,202:INFO:_master_model_container: 1
2024-11-30 17:40:13,203:INFO:_display_container: 2
2024-11-30 17:40:13,204:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:40:13,204:INFO:create_model() successfully completed......................................
2024-11-30 17:40:13,386:INFO:Initializing predict_model()
2024-11-30 17:40:13,387:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000147434740D0>)
2024-11-30 17:40:13,387:INFO:Checking exceptions
2024-11-30 17:40:13,387:INFO:Preloading libraries
2024-11-30 17:40:13,459:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:13,464:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:13,468:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:13,636:INFO:Initializing plot_model()
2024-11-30 17:40:13,636:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, system=True)
2024-11-30 17:40:13,637:INFO:Checking exceptions
2024-11-30 17:40:13,650:INFO:Preloading libraries
2024-11-30 17:40:13,651:INFO:Copying training dataset
2024-11-30 17:40:13,651:INFO:Plot type: confusion_matrix
2024-11-30 17:40:13,715:INFO:Fitting Model
2024-11-30 17:40:13,717:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 17:40:13,717:INFO:Scoring test/hold-out set
2024-11-30 17:40:13,919:INFO:Visual Rendered Successfully
2024-11-30 17:40:14,040:INFO:plot_model() successfully completed......................................
2024-11-30 17:40:14,070:INFO:Initializing tune_model()
2024-11-30 17:40:14,070:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>)
2024-11-30 17:40:14,071:INFO:Checking exceptions
2024-11-30 17:40:14,119:INFO:Copying training dataset
2024-11-30 17:40:14,129:INFO:Checking base model
2024-11-30 17:40:14,129:INFO:Base model : Logistic Regression
2024-11-30 17:40:14,137:INFO:Declaring metric variables
2024-11-30 17:40:14,150:INFO:Defining Hyperparameters
2024-11-30 17:40:14,404:INFO:Tuning with n_jobs=-1
2024-11-30 17:40:14,404:INFO:Initializing RandomizedSearchCV
2024-11-30 17:40:15,294:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 17:40:15,295:INFO:Hyperparameter search completed
2024-11-30 17:40:15,295:INFO:SubProcess create_model() called ==================================
2024-11-30 17:40:15,296:INFO:Initializing create_model()
2024-11-30 17:40:15,296:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001475040E130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 17:40:15,296:INFO:Checking exceptions
2024-11-30 17:40:15,296:INFO:Importing libraries
2024-11-30 17:40:15,297:INFO:Copying training dataset
2024-11-30 17:40:15,304:INFO:Defining folds
2024-11-30 17:40:15,305:INFO:Declaring metric variables
2024-11-30 17:40:15,311:INFO:Importing untrained model
2024-11-30 17:40:15,311:INFO:Declaring custom model
2024-11-30 17:40:15,318:INFO:Logistic Regression Imported successfully
2024-11-30 17:40:15,330:INFO:Starting cross validation
2024-11-30 17:40:15,332:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:40:15,412:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,422:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,427:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,431:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,436:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,437:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,448:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,450:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,454:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,459:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,470:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,477:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,504:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,511:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,516:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,529:INFO:Calculating mean and std
2024-11-30 17:40:15,531:INFO:Creating metrics dataframe
2024-11-30 17:40:15,537:INFO:Finalizing model
2024-11-30 17:40:15,576:INFO:Uploading results into container
2024-11-30 17:40:15,579:INFO:Uploading model into container now
2024-11-30 17:40:15,579:INFO:_master_model_container: 2
2024-11-30 17:40:15,580:INFO:_display_container: 4
2024-11-30 17:40:15,581:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:40:15,581:INFO:create_model() successfully completed......................................
2024-11-30 17:40:15,719:INFO:SubProcess create_model() end ==================================
2024-11-30 17:40:15,719:INFO:choose_better activated
2024-11-30 17:40:15,724:INFO:SubProcess create_model() called ==================================
2024-11-30 17:40:15,724:INFO:Initializing create_model()
2024-11-30 17:40:15,725:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:40:15,725:INFO:Checking exceptions
2024-11-30 17:40:15,728:INFO:Importing libraries
2024-11-30 17:40:15,728:INFO:Copying training dataset
2024-11-30 17:40:15,732:INFO:Defining folds
2024-11-30 17:40:15,732:INFO:Declaring metric variables
2024-11-30 17:40:15,732:INFO:Importing untrained model
2024-11-30 17:40:15,732:INFO:Declaring custom model
2024-11-30 17:40:15,733:INFO:Logistic Regression Imported successfully
2024-11-30 17:40:15,733:INFO:Starting cross validation
2024-11-30 17:40:15,734:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 17:40:15,810:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,814:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,818:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,820:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,827:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,829:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,832:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,843:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,846:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,850:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,853:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,862:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,888:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,893:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,902:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:15,924:INFO:Calculating mean and std
2024-11-30 17:40:15,925:INFO:Creating metrics dataframe
2024-11-30 17:40:15,928:INFO:Finalizing model
2024-11-30 17:40:15,947:INFO:Uploading results into container
2024-11-30 17:40:15,948:INFO:Uploading model into container now
2024-11-30 17:40:15,948:INFO:_master_model_container: 3
2024-11-30 17:40:15,948:INFO:_display_container: 5
2024-11-30 17:40:15,949:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:40:15,949:INFO:create_model() successfully completed......................................
2024-11-30 17:40:16,072:INFO:SubProcess create_model() end ==================================
2024-11-30 17:40:16,078:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:40:16,079:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 17:40:16,080:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 17:40:16,080:INFO:choose_better completed
2024-11-30 17:40:16,081:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 17:40:16,105:INFO:_master_model_container: 3
2024-11-30 17:40:16,106:INFO:_display_container: 4
2024-11-30 17:40:16,109:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:40:16,109:INFO:tune_model() successfully completed......................................
2024-11-30 17:40:16,289:INFO:Initializing predict_model()
2024-11-30 17:40:16,291:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014752D748B0>)
2024-11-30 17:40:16,291:INFO:Checking exceptions
2024-11-30 17:40:16,292:INFO:Preloading libraries
2024-11-30 17:40:16,360:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:16,365:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:16,369:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 17:40:16,540:INFO:Initializing plot_model()
2024-11-30 17:40:16,541:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, system=True)
2024-11-30 17:40:16,541:INFO:Checking exceptions
2024-11-30 17:40:16,550:INFO:Preloading libraries
2024-11-30 17:40:16,550:INFO:Copying training dataset
2024-11-30 17:40:16,551:INFO:Plot type: feature
2024-11-30 17:40:18,176:INFO:Visual Rendered Successfully
2024-11-30 17:40:18,346:INFO:plot_model() successfully completed......................................
2024-11-30 17:40:18,428:INFO:Initializing finalize_model()
2024-11-30 17:40:18,429:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-30 17:40:18,430:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 17:40:18,439:INFO:Initializing create_model()
2024-11-30 17:40:18,440:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 17:40:18,440:INFO:Checking exceptions
2024-11-30 17:40:18,445:INFO:Importing libraries
2024-11-30 17:40:18,445:INFO:Copying training dataset
2024-11-30 17:40:18,446:INFO:Defining folds
2024-11-30 17:40:18,446:INFO:Declaring metric variables
2024-11-30 17:40:18,446:INFO:Importing untrained model
2024-11-30 17:40:18,446:INFO:Declaring custom model
2024-11-30 17:40:18,448:INFO:Logistic Regression Imported successfully
2024-11-30 17:40:18,450:INFO:Cross validation set to False
2024-11-30 17:40:18,450:INFO:Fitting Model
2024-11-30 17:40:18,509:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 17:40:18,510:INFO:create_model() successfully completed......................................
2024-11-30 17:40:18,682:INFO:_master_model_container: 3
2024-11-30 17:40:18,682:INFO:_display_container: 5
2024-11-30 17:40:18,690:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 17:40:18,690:INFO:finalize_model() successfully completed......................................
2024-11-30 17:40:18,919:INFO:Soft dependency imported: fastapi: 0.115.5
2024-11-30 17:40:18,919:INFO:Soft dependency imported: uvicorn: 0.32.1
2024-11-30 17:40:18,920:INFO:Soft dependency imported: pydantic: 2.10.2
2024-11-30 17:40:18,952:INFO:Initializing save_model()
2024-11-30 17:40:18,952:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-30 17:40:18,953:INFO:Adding model into prep_pipe
2024-11-30 17:40:18,953:WARNING:Only Model saved as it was a pipeline.
2024-11-30 17:40:18,967:INFO:modele_fotio.pkl saved in current working directory
2024-11-30 17:40:18,986:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 17:40:18,986:INFO:save_model() successfully completed......................................
2024-11-30 17:40:52,769:INFO:Soft dependency imported: fastapi: 0.115.5
2024-11-30 17:40:52,769:INFO:Soft dependency imported: uvicorn: 0.32.1
2024-11-30 17:40:52,770:INFO:Soft dependency imported: pydantic: 2.10.2
2024-11-30 17:40:52,802:INFO:Initializing save_model()
2024-11-30 17:40:52,802:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-30 17:40:52,802:INFO:Adding model into prep_pipe
2024-11-30 17:40:52,802:WARNING:Only Model saved as it was a pipeline.
2024-11-30 17:40:52,811:INFO:modele_fotio.pkl saved in current working directory
2024-11-30 17:40:52,824:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 17:40:52,824:INFO:save_model() successfully completed......................................
2024-11-30 22:41:37,121:INFO:Soft dependency imported: fastapi: 0.115.5
2024-11-30 22:41:37,124:INFO:Soft dependency imported: uvicorn: 0.32.1
2024-11-30 22:41:37,126:INFO:Soft dependency imported: pydantic: 2.10.2
2024-11-30 22:41:37,212:INFO:Initializing save_model()
2024-11-30 22:41:37,213:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=api_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-30 22:41:37,214:INFO:Adding model into prep_pipe
2024-11-30 22:41:37,215:WARNING:Only Model saved as it was a pipeline.
2024-11-30 22:41:37,235:INFO:api_fotio.pkl saved in current working directory
2024-11-30 22:41:37,243:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:41:37,244:INFO:save_model() successfully completed......................................
2024-11-30 22:51:44,599:INFO:Initializing finalize_model()
2024-11-30 22:51:44,600:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-30 22:51:44,600:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 22:51:44,607:INFO:Initializing create_model()
2024-11-30 22:51:44,607:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001474AF26070>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 22:51:44,608:INFO:Checking exceptions
2024-11-30 22:51:44,616:INFO:Importing libraries
2024-11-30 22:51:44,617:INFO:Copying training dataset
2024-11-30 22:51:44,618:INFO:Defining folds
2024-11-30 22:51:44,618:INFO:Declaring metric variables
2024-11-30 22:51:44,619:INFO:Importing untrained model
2024-11-30 22:51:44,619:INFO:Declaring custom model
2024-11-30 22:51:44,621:INFO:Logistic Regression Imported successfully
2024-11-30 22:51:44,624:INFO:Cross validation set to False
2024-11-30 22:51:44,624:INFO:Fitting Model
2024-11-30 22:51:44,672:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:51:44,672:INFO:create_model() successfully completed......................................
2024-11-30 22:51:44,792:INFO:_master_model_container: 3
2024-11-30 22:51:44,792:INFO:_display_container: 5
2024-11-30 22:51:44,804:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:51:44,804:INFO:finalize_model() successfully completed......................................
2024-11-30 22:52:05,633:INFO:Soft dependency imported: fastapi: 0.115.5
2024-11-30 22:52:05,633:INFO:Soft dependency imported: uvicorn: 0.32.1
2024-11-30 22:52:05,633:INFO:Soft dependency imported: pydantic: 2.10.2
2024-11-30 22:52:05,666:INFO:Initializing save_model()
2024-11-30 22:52:05,666:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-30 22:52:05,668:INFO:Adding model into prep_pipe
2024-11-30 22:52:05,668:WARNING:Only Model saved as it was a pipeline.
2024-11-30 22:52:05,677:INFO:modele_fotio.pkl saved in current working directory
2024-11-30 22:52:05,688:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:52:05,689:INFO:save_model() successfully completed......................................
2024-11-30 22:52:07,475:INFO:Soft dependency imported: fastapi: 0.115.5
2024-11-30 22:52:07,476:INFO:Soft dependency imported: uvicorn: 0.32.1
2024-11-30 22:52:07,476:INFO:Soft dependency imported: pydantic: 2.10.2
2024-11-30 22:52:07,503:INFO:Initializing save_model()
2024-11-30 22:52:07,503:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-30 22:52:07,504:INFO:Adding model into prep_pipe
2024-11-30 22:52:07,505:WARNING:Only Model saved as it was a pipeline.
2024-11-30 22:52:07,514:INFO:modele_fotio.pkl saved in current working directory
2024-11-30 22:52:07,528:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:52:07,528:INFO:save_model() successfully completed......................................
2024-11-30 22:53:44,629:INFO:Initializing save_model()
2024-11-30 22:53:44,629:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-30 22:53:44,629:INFO:Adding model into prep_pipe
2024-11-30 22:53:44,630:WARNING:Only Model saved as it was a pipeline.
2024-11-30 22:53:44,642:INFO:modele_fotio.pkl saved in current working directory
2024-11-30 22:53:44,658:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:53:44,659:INFO:save_model() successfully completed......................................
2024-11-30 22:58:45,921:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 22:58:45,921:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 22:58:45,921:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 22:58:45,921:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-30 22:58:47,940:INFO:PyCaret ClassificationExperiment
2024-11-30 22:58:47,940:INFO:Logging name: clf-default-name
2024-11-30 22:58:47,941:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-30 22:58:47,941:INFO:version 3.3.2
2024-11-30 22:58:47,941:INFO:Initializing setup()
2024-11-30 22:58:47,941:INFO:self.USI: 40bc
2024-11-30 22:58:47,941:INFO:self._variable_keys: {'fold_groups_param', 'gpu_n_jobs_param', '_available_plots', 'X_test', 'logging_param', 'gpu_param', 'X_train', 'html_param', 'is_multiclass', 'USI', 'target_param', 'idx', 'data', 'n_jobs_param', 'exp_id', 'fold_generator', 'y_test', 'memory', 'seed', 'exp_name_log', 'y_train', 'log_plots_param', '_ml_usecase', 'pipeline', 'fold_shuffle_param', 'y', 'X', 'fix_imbalance'}
2024-11-30 22:58:47,942:INFO:Checking environment
2024-11-30 22:58:47,942:INFO:python_version: 3.9.12
2024-11-30 22:58:47,942:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2024-11-30 22:58:47,942:INFO:machine: AMD64
2024-11-30 22:58:47,942:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-30 22:58:47,948:INFO:Memory: svmem(total=8481583104, available=1071730688, percent=87.4, used=7409852416, free=1071730688)
2024-11-30 22:58:47,948:INFO:Physical Core: 2
2024-11-30 22:58:47,948:INFO:Logical Core: 4
2024-11-30 22:58:47,948:INFO:Checking libraries
2024-11-30 22:58:47,949:INFO:System:
2024-11-30 22:58:47,949:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2024-11-30 22:58:47,949:INFO:executable: c:\Users\Administrateur\anaconda3\python.exe
2024-11-30 22:58:47,949:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-30 22:58:47,949:INFO:PyCaret required dependencies:
2024-11-30 22:58:48,980:INFO:                 pip: 21.2.4
2024-11-30 22:58:48,980:INFO:          setuptools: 61.2.0
2024-11-30 22:58:48,980:INFO:             pycaret: 3.3.2
2024-11-30 22:58:48,981:INFO:             IPython: 8.2.0
2024-11-30 22:58:48,981:INFO:          ipywidgets: 7.6.5
2024-11-30 22:58:48,981:INFO:                tqdm: 4.64.0
2024-11-30 22:58:48,981:INFO:               numpy: 1.21.6
2024-11-30 22:58:48,981:INFO:              pandas: 1.4.2
2024-11-30 22:58:48,981:INFO:              jinja2: 2.11.3
2024-11-30 22:58:48,982:INFO:               scipy: 1.7.3
2024-11-30 22:58:48,982:INFO:              joblib: 1.1.0
2024-11-30 22:58:48,982:INFO:             sklearn: 1.0.2
2024-11-30 22:58:48,982:INFO:                pyod: 2.0.2
2024-11-30 22:58:48,982:INFO:            imblearn: 0.12.4
2024-11-30 22:58:48,982:INFO:   category_encoders: 2.6.4
2024-11-30 22:58:48,982:INFO:            lightgbm: 4.5.0
2024-11-30 22:58:48,982:INFO:               numba: 0.55.1
2024-11-30 22:58:48,982:INFO:            requests: 2.27.1
2024-11-30 22:58:48,983:INFO:          matplotlib: 3.5.1
2024-11-30 22:58:48,983:INFO:          scikitplot: 0.3.7
2024-11-30 22:58:48,983:INFO:         yellowbrick: 1.5
2024-11-30 22:58:48,984:INFO:              plotly: 5.6.0
2024-11-30 22:58:48,987:INFO:    plotly-resampler: Not installed
2024-11-30 22:58:48,987:INFO:             kaleido: 0.2.1
2024-11-30 22:58:48,987:INFO:           schemdraw: 0.15
2024-11-30 22:58:48,988:INFO:         statsmodels: 0.13.2
2024-11-30 22:58:48,988:INFO:              sktime: 0.26.0
2024-11-30 22:58:48,988:INFO:               tbats: 1.1.3
2024-11-30 22:58:48,988:INFO:            pmdarima: 2.0.4
2024-11-30 22:58:48,988:INFO:              psutil: 5.8.0
2024-11-30 22:58:48,989:INFO:          markupsafe: 2.0.1
2024-11-30 22:58:48,989:INFO:             pickle5: Not installed
2024-11-30 22:58:48,989:INFO:         cloudpickle: 2.0.0
2024-11-30 22:58:48,989:INFO:         deprecation: 2.1.0
2024-11-30 22:58:48,989:INFO:              xxhash: 3.5.0
2024-11-30 22:58:48,989:INFO:           wurlitzer: Not installed
2024-11-30 22:58:48,989:INFO:PyCaret optional dependencies:
2024-11-30 22:58:50,277:INFO:                shap: Not installed
2024-11-30 22:58:50,277:INFO:           interpret: Not installed
2024-11-30 22:58:50,277:INFO:                umap: Not installed
2024-11-30 22:58:50,277:INFO:     ydata_profiling: Not installed
2024-11-30 22:58:50,277:INFO:  explainerdashboard: Not installed
2024-11-30 22:58:50,277:INFO:             autoviz: Not installed
2024-11-30 22:58:50,277:INFO:           fairlearn: Not installed
2024-11-30 22:58:50,277:INFO:          deepchecks: Not installed
2024-11-30 22:58:50,277:INFO:             xgboost: Not installed
2024-11-30 22:58:50,277:INFO:            catboost: Not installed
2024-11-30 22:58:50,277:INFO:              kmodes: Not installed
2024-11-30 22:58:50,277:INFO:             mlxtend: Not installed
2024-11-30 22:58:50,277:INFO:       statsforecast: Not installed
2024-11-30 22:58:50,278:INFO:        tune_sklearn: Not installed
2024-11-30 22:58:50,278:INFO:                 ray: Not installed
2024-11-30 22:58:50,278:INFO:            hyperopt: Not installed
2024-11-30 22:58:50,278:INFO:              optuna: Not installed
2024-11-30 22:58:50,278:INFO:               skopt: Not installed
2024-11-30 22:58:50,278:INFO:              mlflow: Not installed
2024-11-30 22:58:50,278:INFO:              gradio: Not installed
2024-11-30 22:58:50,278:INFO:             fastapi: 0.115.5
2024-11-30 22:58:50,278:INFO:             uvicorn: 0.32.1
2024-11-30 22:58:50,278:INFO:              m2cgen: Not installed
2024-11-30 22:58:50,278:INFO:           evidently: Not installed
2024-11-30 22:58:50,278:INFO:               fugue: Not installed
2024-11-30 22:58:50,278:INFO:           streamlit: Not installed
2024-11-30 22:58:50,278:INFO:             prophet: Not installed
2024-11-30 22:58:50,278:INFO:None
2024-11-30 22:58:50,278:INFO:Set up data.
2024-11-30 22:58:50,283:INFO:Set up folding strategy.
2024-11-30 22:58:50,284:INFO:Set up train/test split.
2024-11-30 22:58:50,291:INFO:Set up index.
2024-11-30 22:58:50,291:INFO:Assigning column types.
2024-11-30 22:58:50,295:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-30 22:58:50,351:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 22:58:50,356:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 22:58:50,415:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,415:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,467:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-30 22:58:50,468:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 22:58:50,500:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,500:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,501:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-30 22:58:50,563:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 22:58:50,595:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,595:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,650:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-30 22:58:50,684:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,684:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,685:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-30 22:58:50,785:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,786:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,897:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:50,914:INFO:Preparing preprocessing pipeline...
2024-11-30 22:58:50,916:INFO:Set up label encoding.
2024-11-30 22:58:50,916:INFO:Set up simple imputation.
2024-11-30 22:58:50,916:INFO:Set up feature normalization.
2024-11-30 22:58:50,968:INFO:Finished creating preprocessing pipeline.
2024-11-30 22:58:50,982:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-11-30 22:58:50,983:INFO:Creating final display dataframe.
2024-11-30 22:58:51,080:INFO:Setup _display_container:                     Description                     Value
0                    Session id                      2024
1                        Target                   diabete
2                   Target type                    Binary
3                Target mapping  negative: 0, positive: 1
4           Original data shape                  (724, 5)
5        Transformed data shape                  (724, 5)
6   Transformed train set shape                  (506, 5)
7    Transformed test set shape                  (218, 5)
8              Numeric features                         4
9                    Preprocess                      True
10              Imputation type                    simple
11           Numeric imputation                      mean
12       Categorical imputation                      mode
13                    Normalize                      True
14             Normalize method                    zscore
15               Fold Generator           StratifiedKFold
16                  Fold Number                         5
17                     CPU Jobs                        -1
18                      Use GPU                     False
19               Log Experiment                     False
20              Experiment Name          clf-default-name
21                          USI                      40bc
2024-11-30 22:58:51,391:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:51,391:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:51,580:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:51,581:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:51,584:INFO:setup() successfully completed in 3.65s...............
2024-11-30 22:58:51,610:INFO:gpu_param set to False
2024-11-30 22:58:51,745:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:51,745:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:51,841:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:51,842:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-30 22:58:51,860:INFO:Initializing create_model()
2024-11-30 22:58:51,860:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 22:58:51,860:INFO:Checking exceptions
2024-11-30 22:58:51,919:INFO:Importing libraries
2024-11-30 22:58:51,920:INFO:Copying training dataset
2024-11-30 22:58:51,932:INFO:Defining folds
2024-11-30 22:58:51,932:INFO:Declaring metric variables
2024-11-30 22:58:51,940:INFO:Importing untrained model
2024-11-30 22:58:51,948:INFO:Logistic Regression Imported successfully
2024-11-30 22:58:51,959:INFO:Starting cross validation
2024-11-30 22:58:51,961:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 22:59:04,264:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,265:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,273:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,276:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,281:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,283:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,503:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,512:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,521:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,528:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,536:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,626:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,634:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,644:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:04,674:INFO:Calculating mean and std
2024-11-30 22:59:04,680:INFO:Creating metrics dataframe
2024-11-30 22:59:04,693:INFO:Finalizing model
2024-11-30 22:59:04,748:INFO:Uploading results into container
2024-11-30 22:59:04,749:INFO:Uploading model into container now
2024-11-30 22:59:04,768:INFO:_master_model_container: 1
2024-11-30 22:59:04,768:INFO:_display_container: 2
2024-11-30 22:59:04,769:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 22:59:04,770:INFO:create_model() successfully completed......................................
2024-11-30 22:59:04,983:INFO:Initializing predict_model()
2024-11-30 22:59:04,984:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002241A1A1160>)
2024-11-30 22:59:04,984:INFO:Checking exceptions
2024-11-30 22:59:04,984:INFO:Preloading libraries
2024-11-30 22:59:05,066:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:05,073:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:05,080:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:05,286:INFO:Initializing plot_model()
2024-11-30 22:59:05,286:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, system=True)
2024-11-30 22:59:05,286:INFO:Checking exceptions
2024-11-30 22:59:05,298:INFO:Preloading libraries
2024-11-30 22:59:05,299:INFO:Copying training dataset
2024-11-30 22:59:05,299:INFO:Plot type: confusion_matrix
2024-11-30 22:59:05,368:INFO:Fitting Model
2024-11-30 22:59:05,386:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 22:59:05,387:INFO:Scoring test/hold-out set
2024-11-30 22:59:05,710:INFO:Visual Rendered Successfully
2024-11-30 22:59:05,926:INFO:plot_model() successfully completed......................................
2024-11-30 22:59:05,978:INFO:Initializing tune_model()
2024-11-30 22:59:05,978:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>)
2024-11-30 22:59:05,979:INFO:Checking exceptions
2024-11-30 22:59:06,044:INFO:Copying training dataset
2024-11-30 22:59:06,052:INFO:Checking base model
2024-11-30 22:59:06,052:INFO:Base model : Logistic Regression
2024-11-30 22:59:06,061:INFO:Declaring metric variables
2024-11-30 22:59:06,070:INFO:Defining Hyperparameters
2024-11-30 22:59:06,232:INFO:Tuning with n_jobs=-1
2024-11-30 22:59:06,232:INFO:Initializing RandomizedSearchCV
2024-11-30 22:59:07,408:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 22:59:07,411:INFO:Hyperparameter search completed
2024-11-30 22:59:07,411:INFO:SubProcess create_model() called ==================================
2024-11-30 22:59:07,417:INFO:Initializing create_model()
2024-11-30 22:59:07,417:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000224204C7F70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 22:59:07,417:INFO:Checking exceptions
2024-11-30 22:59:07,417:INFO:Importing libraries
2024-11-30 22:59:07,417:INFO:Copying training dataset
2024-11-30 22:59:07,427:INFO:Defining folds
2024-11-30 22:59:07,427:INFO:Declaring metric variables
2024-11-30 22:59:07,440:INFO:Importing untrained model
2024-11-30 22:59:07,441:INFO:Declaring custom model
2024-11-30 22:59:07,458:INFO:Logistic Regression Imported successfully
2024-11-30 22:59:07,490:INFO:Starting cross validation
2024-11-30 22:59:07,494:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 22:59:07,608:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,617:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,624:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,638:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,640:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,642:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,650:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,650:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,651:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,657:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,657:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,657:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,753:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,762:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,771:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:07,789:INFO:Calculating mean and std
2024-11-30 22:59:07,794:INFO:Creating metrics dataframe
2024-11-30 22:59:07,808:INFO:Finalizing model
2024-11-30 22:59:07,858:INFO:Uploading results into container
2024-11-30 22:59:07,859:INFO:Uploading model into container now
2024-11-30 22:59:07,860:INFO:_master_model_container: 2
2024-11-30 22:59:07,860:INFO:_display_container: 4
2024-11-30 22:59:07,861:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 22:59:07,861:INFO:create_model() successfully completed......................................
2024-11-30 22:59:08,039:INFO:SubProcess create_model() end ==================================
2024-11-30 22:59:08,040:INFO:choose_better activated
2024-11-30 22:59:08,050:INFO:SubProcess create_model() called ==================================
2024-11-30 22:59:08,052:INFO:Initializing create_model()
2024-11-30 22:59:08,052:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 22:59:08,053:INFO:Checking exceptions
2024-11-30 22:59:08,057:INFO:Importing libraries
2024-11-30 22:59:08,057:INFO:Copying training dataset
2024-11-30 22:59:08,067:INFO:Defining folds
2024-11-30 22:59:08,068:INFO:Declaring metric variables
2024-11-30 22:59:08,068:INFO:Importing untrained model
2024-11-30 22:59:08,068:INFO:Declaring custom model
2024-11-30 22:59:08,070:INFO:Logistic Regression Imported successfully
2024-11-30 22:59:08,071:INFO:Starting cross validation
2024-11-30 22:59:08,073:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 22:59:08,161:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,169:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,169:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,170:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,177:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,182:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,191:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,216:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,224:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,225:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,235:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,246:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,283:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,292:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,303:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,321:INFO:Calculating mean and std
2024-11-30 22:59:08,322:INFO:Creating metrics dataframe
2024-11-30 22:59:08,328:INFO:Finalizing model
2024-11-30 22:59:08,369:INFO:Uploading results into container
2024-11-30 22:59:08,371:INFO:Uploading model into container now
2024-11-30 22:59:08,371:INFO:_master_model_container: 3
2024-11-30 22:59:08,372:INFO:_display_container: 5
2024-11-30 22:59:08,372:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 22:59:08,373:INFO:create_model() successfully completed......................................
2024-11-30 22:59:08,555:INFO:SubProcess create_model() end ==================================
2024-11-30 22:59:08,557:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 22:59:08,558:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 22:59:08,559:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 22:59:08,559:INFO:choose_better completed
2024-11-30 22:59:08,559:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 22:59:08,586:INFO:_master_model_container: 3
2024-11-30 22:59:08,586:INFO:_display_container: 4
2024-11-30 22:59:08,587:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 22:59:08,588:INFO:tune_model() successfully completed......................................
2024-11-30 22:59:08,845:INFO:Initializing predict_model()
2024-11-30 22:59:08,846:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002242233BCA0>)
2024-11-30 22:59:08,846:INFO:Checking exceptions
2024-11-30 22:59:08,847:INFO:Preloading libraries
2024-11-30 22:59:08,906:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,910:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:08,916:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 22:59:09,105:INFO:Initializing plot_model()
2024-11-30 22:59:09,105:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, system=True)
2024-11-30 22:59:09,105:INFO:Checking exceptions
2024-11-30 22:59:09,113:INFO:Preloading libraries
2024-11-30 22:59:09,114:INFO:Copying training dataset
2024-11-30 22:59:09,114:INFO:Plot type: feature
2024-11-30 22:59:10,572:INFO:Visual Rendered Successfully
2024-11-30 22:59:10,692:INFO:plot_model() successfully completed......................................
2024-11-30 22:59:10,789:INFO:Initializing finalize_model()
2024-11-30 22:59:10,789:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-30 22:59:10,790:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 22:59:10,798:INFO:Initializing create_model()
2024-11-30 22:59:10,799:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 22:59:10,799:INFO:Checking exceptions
2024-11-30 22:59:10,803:INFO:Importing libraries
2024-11-30 22:59:10,803:INFO:Copying training dataset
2024-11-30 22:59:10,804:INFO:Defining folds
2024-11-30 22:59:10,804:INFO:Declaring metric variables
2024-11-30 22:59:10,805:INFO:Importing untrained model
2024-11-30 22:59:10,805:INFO:Declaring custom model
2024-11-30 22:59:10,806:INFO:Logistic Regression Imported successfully
2024-11-30 22:59:10,808:INFO:Cross validation set to False
2024-11-30 22:59:10,808:INFO:Fitting Model
2024-11-30 22:59:10,851:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:59:10,852:INFO:create_model() successfully completed......................................
2024-11-30 22:59:11,009:INFO:_master_model_container: 3
2024-11-30 22:59:11,009:INFO:_display_container: 5
2024-11-30 22:59:11,018:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:59:11,018:INFO:finalize_model() successfully completed......................................
2024-11-30 22:59:11,196:INFO:Initializing save_model()
2024-11-30 22:59:11,196:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-30 22:59:11,197:INFO:Adding model into prep_pipe
2024-11-30 22:59:11,197:WARNING:Only Model saved as it was a pipeline.
2024-11-30 22:59:11,204:INFO:modele_fotio.pkl saved in current working directory
2024-11-30 22:59:11,212:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 22:59:11,212:INFO:save_model() successfully completed......................................
2024-11-30 23:02:31,783:INFO:Initializing tune_model()
2024-11-30 23:02:31,783:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>)
2024-11-30 23:02:31,783:INFO:Checking exceptions
2024-11-30 23:02:31,867:INFO:Copying training dataset
2024-11-30 23:02:31,876:INFO:Checking base model
2024-11-30 23:02:31,878:INFO:Base model : Logistic Regression
2024-11-30 23:02:31,888:INFO:Declaring metric variables
2024-11-30 23:02:31,907:INFO:Defining Hyperparameters
2024-11-30 23:02:32,232:INFO:Tuning with n_jobs=-1
2024-11-30 23:02:32,232:INFO:Initializing RandomizedSearchCV
2024-11-30 23:02:33,278:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 23:02:33,282:INFO:Hyperparameter search completed
2024-11-30 23:02:33,282:INFO:SubProcess create_model() called ==================================
2024-11-30 23:02:33,284:INFO:Initializing create_model()
2024-11-30 23:02:33,285:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002241F8C7520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 23:02:33,285:INFO:Checking exceptions
2024-11-30 23:02:33,285:INFO:Importing libraries
2024-11-30 23:02:33,285:INFO:Copying training dataset
2024-11-30 23:02:33,297:INFO:Defining folds
2024-11-30 23:02:33,297:INFO:Declaring metric variables
2024-11-30 23:02:33,304:INFO:Importing untrained model
2024-11-30 23:02:33,304:INFO:Declaring custom model
2024-11-30 23:02:33,311:INFO:Logistic Regression Imported successfully
2024-11-30 23:02:33,329:INFO:Starting cross validation
2024-11-30 23:02:33,330:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 23:02:33,419:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,426:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,430:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,436:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,439:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,443:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,446:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,447:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,450:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,456:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,464:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,470:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,503:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,508:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,515:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,529:INFO:Calculating mean and std
2024-11-30 23:02:33,532:INFO:Creating metrics dataframe
2024-11-30 23:02:33,544:INFO:Finalizing model
2024-11-30 23:02:33,595:INFO:Uploading results into container
2024-11-30 23:02:33,597:INFO:Uploading model into container now
2024-11-30 23:02:33,599:INFO:_master_model_container: 4
2024-11-30 23:02:33,599:INFO:_display_container: 6
2024-11-30 23:02:33,600:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 23:02:33,600:INFO:create_model() successfully completed......................................
2024-11-30 23:02:33,762:INFO:SubProcess create_model() end ==================================
2024-11-30 23:02:33,762:INFO:choose_better activated
2024-11-30 23:02:33,768:INFO:SubProcess create_model() called ==================================
2024-11-30 23:02:33,769:INFO:Initializing create_model()
2024-11-30 23:02:33,769:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 23:02:33,769:INFO:Checking exceptions
2024-11-30 23:02:33,773:INFO:Importing libraries
2024-11-30 23:02:33,773:INFO:Copying training dataset
2024-11-30 23:02:33,782:INFO:Defining folds
2024-11-30 23:02:33,782:INFO:Declaring metric variables
2024-11-30 23:02:33,783:INFO:Importing untrained model
2024-11-30 23:02:33,783:INFO:Declaring custom model
2024-11-30 23:02:33,784:INFO:Logistic Regression Imported successfully
2024-11-30 23:02:33,784:INFO:Starting cross validation
2024-11-30 23:02:33,786:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 23:02:33,883:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,884:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,891:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,895:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,901:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,902:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,912:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,919:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,929:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,937:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:33,937:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:34,020:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:34,032:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:34,040:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:02:34,057:INFO:Calculating mean and std
2024-11-30 23:02:34,058:INFO:Creating metrics dataframe
2024-11-30 23:02:34,064:INFO:Finalizing model
2024-11-30 23:02:34,085:INFO:Uploading results into container
2024-11-30 23:02:34,086:INFO:Uploading model into container now
2024-11-30 23:02:34,086:INFO:_master_model_container: 5
2024-11-30 23:02:34,086:INFO:_display_container: 7
2024-11-30 23:02:34,087:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 23:02:34,087:INFO:create_model() successfully completed......................................
2024-11-30 23:02:34,221:INFO:SubProcess create_model() end ==================================
2024-11-30 23:02:34,222:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 23:02:34,222:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 23:02:34,223:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 23:02:34,223:INFO:choose_better completed
2024-11-30 23:02:34,223:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 23:02:34,238:INFO:_master_model_container: 5
2024-11-30 23:02:34,238:INFO:_display_container: 6
2024-11-30 23:02:34,239:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 23:02:34,239:INFO:tune_model() successfully completed......................................
2024-11-30 23:03:06,656:INFO:Initializing predict_model()
2024-11-30 23:03:06,657:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002242233BCA0>)
2024-11-30 23:03:06,657:INFO:Checking exceptions
2024-11-30 23:03:06,657:INFO:Preloading libraries
2024-11-30 23:03:06,731:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:06,738:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:06,744:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:25,794:INFO:Initializing create_model()
2024-11-30 23:03:25,794:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 23:03:25,794:INFO:Checking exceptions
2024-11-30 23:03:25,860:INFO:Importing libraries
2024-11-30 23:03:25,860:INFO:Copying training dataset
2024-11-30 23:03:25,876:INFO:Defining folds
2024-11-30 23:03:25,876:INFO:Declaring metric variables
2024-11-30 23:03:25,891:INFO:Importing untrained model
2024-11-30 23:03:25,899:INFO:Logistic Regression Imported successfully
2024-11-30 23:03:25,915:INFO:Starting cross validation
2024-11-30 23:03:25,919:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 23:03:26,069:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,077:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,085:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,089:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,092:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,097:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,100:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,102:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,109:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,118:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,136:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,142:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,209:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,214:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,217:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:26,225:INFO:Calculating mean and std
2024-11-30 23:03:26,226:INFO:Creating metrics dataframe
2024-11-30 23:03:26,234:INFO:Finalizing model
2024-11-30 23:03:26,267:INFO:Uploading results into container
2024-11-30 23:03:26,272:INFO:Uploading model into container now
2024-11-30 23:03:26,287:INFO:_master_model_container: 6
2024-11-30 23:03:26,287:INFO:_display_container: 8
2024-11-30 23:03:26,289:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 23:03:26,289:INFO:create_model() successfully completed......................................
2024-11-30 23:03:35,091:INFO:Initializing predict_model()
2024-11-30 23:03:35,091:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002242235DE50>)
2024-11-30 23:03:35,092:INFO:Checking exceptions
2024-11-30 23:03:35,092:INFO:Preloading libraries
2024-11-30 23:03:35,167:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:35,173:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:35,179:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:43,738:INFO:Initializing predict_model()
2024-11-30 23:03:43,738:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002242235D3A0>)
2024-11-30 23:03:43,738:INFO:Checking exceptions
2024-11-30 23:03:43,739:INFO:Preloading libraries
2024-11-30 23:03:43,804:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:43,810:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:43,815:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:46,604:INFO:Initializing plot_model()
2024-11-30 23:03:46,604:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, system=True)
2024-11-30 23:03:46,604:INFO:Checking exceptions
2024-11-30 23:03:46,613:INFO:Preloading libraries
2024-11-30 23:03:46,613:INFO:Copying training dataset
2024-11-30 23:03:46,614:INFO:Plot type: confusion_matrix
2024-11-30 23:03:46,676:INFO:Fitting Model
2024-11-30 23:03:46,676:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-11-30 23:03:46,676:INFO:Scoring test/hold-out set
2024-11-30 23:03:46,818:INFO:Visual Rendered Successfully
2024-11-30 23:03:46,971:INFO:plot_model() successfully completed......................................
2024-11-30 23:03:50,654:INFO:Initializing tune_model()
2024-11-30 23:03:50,655:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>)
2024-11-30 23:03:50,655:INFO:Checking exceptions
2024-11-30 23:03:50,730:INFO:Copying training dataset
2024-11-30 23:03:50,741:INFO:Checking base model
2024-11-30 23:03:50,742:INFO:Base model : Logistic Regression
2024-11-30 23:03:50,751:INFO:Declaring metric variables
2024-11-30 23:03:50,762:INFO:Defining Hyperparameters
2024-11-30 23:03:51,054:INFO:Tuning with n_jobs=-1
2024-11-30 23:03:51,054:INFO:Initializing RandomizedSearchCV
2024-11-30 23:03:52,066:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-11-30 23:03:52,068:INFO:Hyperparameter search completed
2024-11-30 23:03:52,068:INFO:SubProcess create_model() called ==================================
2024-11-30 23:03:52,070:INFO:Initializing create_model()
2024-11-30 23:03:52,070:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022421F2F460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-11-30 23:03:52,072:INFO:Checking exceptions
2024-11-30 23:03:52,073:INFO:Importing libraries
2024-11-30 23:03:52,073:INFO:Copying training dataset
2024-11-30 23:03:52,083:INFO:Defining folds
2024-11-30 23:03:52,083:INFO:Declaring metric variables
2024-11-30 23:03:52,090:INFO:Importing untrained model
2024-11-30 23:03:52,091:INFO:Declaring custom model
2024-11-30 23:03:52,099:INFO:Logistic Regression Imported successfully
2024-11-30 23:03:52,113:INFO:Starting cross validation
2024-11-30 23:03:52,116:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 23:03:52,201:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,207:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,212:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,214:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,218:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,220:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,228:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,233:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,236:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,243:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,243:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,250:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,295:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,300:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,304:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,327:INFO:Calculating mean and std
2024-11-30 23:03:52,330:INFO:Creating metrics dataframe
2024-11-30 23:03:52,346:INFO:Finalizing model
2024-11-30 23:03:52,400:INFO:Uploading results into container
2024-11-30 23:03:52,402:INFO:Uploading model into container now
2024-11-30 23:03:52,403:INFO:_master_model_container: 7
2024-11-30 23:03:52,403:INFO:_display_container: 11
2024-11-30 23:03:52,405:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 23:03:52,406:INFO:create_model() successfully completed......................................
2024-11-30 23:03:52,635:INFO:SubProcess create_model() end ==================================
2024-11-30 23:03:52,635:INFO:choose_better activated
2024-11-30 23:03:52,642:INFO:SubProcess create_model() called ==================================
2024-11-30 23:03:52,643:INFO:Initializing create_model()
2024-11-30 23:03:52,643:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 23:03:52,643:INFO:Checking exceptions
2024-11-30 23:03:52,647:INFO:Importing libraries
2024-11-30 23:03:52,647:INFO:Copying training dataset
2024-11-30 23:03:52,653:INFO:Defining folds
2024-11-30 23:03:52,653:INFO:Declaring metric variables
2024-11-30 23:03:52,654:INFO:Importing untrained model
2024-11-30 23:03:52,654:INFO:Declaring custom model
2024-11-30 23:03:52,657:INFO:Logistic Regression Imported successfully
2024-11-30 23:03:52,658:INFO:Starting cross validation
2024-11-30 23:03:52,661:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-30 23:03:52,749:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,755:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,763:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,769:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,772:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,781:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,791:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,796:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,800:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,819:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,830:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,866:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,870:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,880:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:03:52,906:INFO:Calculating mean and std
2024-11-30 23:03:52,907:INFO:Creating metrics dataframe
2024-11-30 23:03:52,912:INFO:Finalizing model
2024-11-30 23:03:52,949:INFO:Uploading results into container
2024-11-30 23:03:52,949:INFO:Uploading model into container now
2024-11-30 23:03:52,950:INFO:_master_model_container: 8
2024-11-30 23:03:52,950:INFO:_display_container: 12
2024-11-30 23:03:52,950:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 23:03:52,950:INFO:create_model() successfully completed......................................
2024-11-30 23:03:53,110:INFO:SubProcess create_model() end ==================================
2024-11-30 23:03:53,111:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 23:03:53,112:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-11-30 23:03:53,112:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-11-30 23:03:53,112:INFO:choose_better completed
2024-11-30 23:03:53,112:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-11-30 23:03:53,131:INFO:_master_model_container: 8
2024-11-30 23:03:53,132:INFO:_display_container: 11
2024-11-30 23:03:53,133:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 23:03:53,133:INFO:tune_model() successfully completed......................................
2024-11-30 23:04:15,494:INFO:Initializing predict_model()
2024-11-30 23:04:15,495:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002241A1D7AF0>)
2024-11-30 23:04:15,495:INFO:Checking exceptions
2024-11-30 23:04:15,495:INFO:Preloading libraries
2024-11-30 23:04:15,627:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:04:15,639:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:04:15,652:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-30 23:04:21,042:INFO:Initializing plot_model()
2024-11-30 23:04:21,042:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, system=True)
2024-11-30 23:04:21,043:INFO:Checking exceptions
2024-11-30 23:04:21,051:INFO:Preloading libraries
2024-11-30 23:04:21,051:INFO:Copying training dataset
2024-11-30 23:04:21,052:INFO:Plot type: feature
2024-11-30 23:04:21,283:INFO:Visual Rendered Successfully
2024-11-30 23:04:21,399:INFO:plot_model() successfully completed......................................
2024-11-30 23:04:34,289:INFO:Initializing finalize_model()
2024-11-30 23:04:34,290:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-11-30 23:04:34,290:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-30 23:04:34,297:INFO:Initializing create_model()
2024-11-30 23:04:34,298:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002241A181C70>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-11-30 23:04:34,298:INFO:Checking exceptions
2024-11-30 23:04:34,302:INFO:Importing libraries
2024-11-30 23:04:34,303:INFO:Copying training dataset
2024-11-30 23:04:34,303:INFO:Defining folds
2024-11-30 23:04:34,304:INFO:Declaring metric variables
2024-11-30 23:04:34,304:INFO:Importing untrained model
2024-11-30 23:04:34,304:INFO:Declaring custom model
2024-11-30 23:04:34,306:INFO:Logistic Regression Imported successfully
2024-11-30 23:04:34,308:INFO:Cross validation set to False
2024-11-30 23:04:34,308:INFO:Fitting Model
2024-11-30 23:04:34,345:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 23:04:34,346:INFO:create_model() successfully completed......................................
2024-11-30 23:04:34,467:INFO:_master_model_container: 8
2024-11-30 23:04:34,467:INFO:_display_container: 12
2024-11-30 23:04:34,475:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 23:04:34,475:INFO:finalize_model() successfully completed......................................
2024-11-30 23:04:38,282:INFO:Initializing save_model()
2024-11-30 23:04:38,282:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-30 23:04:38,283:INFO:Adding model into prep_pipe
2024-11-30 23:04:38,283:WARNING:Only Model saved as it was a pipeline.
2024-11-30 23:04:38,291:INFO:modele_fotio.pkl saved in current working directory
2024-11-30 23:04:38,302:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-11-30 23:04:38,302:INFO:save_model() successfully completed......................................
2024-12-21 18:26:49,240:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 18:26:49,240:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 18:26:49,240:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 18:26:49,240:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 18:44:24,517:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 18:44:24,518:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 18:44:24,518:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 18:44:24,518:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 19:07:36,459:WARNING:c:\Users\Administrateur\anaconda3\envs\yolo_env\lib\site-packages\scipy\__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.26.4
  warnings.warn(f"A NumPy version >={np_minversion} and <{np_maxversion}"

2024-12-21 19:07:39,861:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 19:07:39,861:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 19:07:39,861:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 19:07:39,861:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-21 19:07:41,073:INFO:PyCaret ClassificationExperiment
2024-12-21 19:07:41,073:INFO:Logging name: clf-default-name
2024-12-21 19:07:41,073:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-12-21 19:07:41,073:INFO:version 3.3.2
2024-12-21 19:07:41,074:INFO:Initializing setup()
2024-12-21 19:07:41,074:INFO:self.USI: e10a
2024-12-21 19:07:41,074:INFO:self._variable_keys: {'pipeline', 'logging_param', 'fold_shuffle_param', 'X_test', 'X_train', 'y_train', 'html_param', 'fix_imbalance', '_available_plots', 'is_multiclass', 'y_test', 'fold_groups_param', 'fold_generator', 'exp_id', 'n_jobs_param', 'X', 'y', 'idx', 'USI', 'data', 'gpu_param', '_ml_usecase', 'gpu_n_jobs_param', 'memory', 'exp_name_log', 'target_param', 'log_plots_param', 'seed'}
2024-12-21 19:07:41,074:INFO:Checking environment
2024-12-21 19:07:41,074:INFO:python_version: 3.9.20
2024-12-21 19:07:41,075:INFO:python_build: ('main', 'Oct  3 2024 07:38:01')
2024-12-21 19:07:41,075:INFO:machine: AMD64
2024-12-21 19:07:41,075:INFO:platform: Windows-10-10.0.19045-SP0
2024-12-21 19:07:41,079:INFO:Memory: svmem(total=8481583104, available=2349555712, percent=72.3, used=6132027392, free=2349555712)
2024-12-21 19:07:41,079:INFO:Physical Core: 2
2024-12-21 19:07:41,079:INFO:Logical Core: 4
2024-12-21 19:07:41,079:INFO:Checking libraries
2024-12-21 19:07:41,079:INFO:System:
2024-12-21 19:07:41,079:INFO:    python: 3.9.20 (main, Oct  3 2024, 07:38:01) [MSC v.1929 64 bit (AMD64)]
2024-12-21 19:07:41,079:INFO:executable: c:\Users\Administrateur\anaconda3\envs\yolo_env\python.exe
2024-12-21 19:07:41,080:INFO:   machine: Windows-10-10.0.19045-SP0
2024-12-21 19:07:41,080:INFO:PyCaret required dependencies:
2024-12-21 19:07:41,779:INFO:                 pip: 24.2
2024-12-21 19:07:41,780:INFO:          setuptools: 75.1.0
2024-12-21 19:07:41,780:INFO:             pycaret: 3.3.2
2024-12-21 19:07:41,780:INFO:             IPython: 8.15.0
2024-12-21 19:07:41,780:INFO:          ipywidgets: 8.1.2
2024-12-21 19:07:41,780:INFO:                tqdm: 4.67.1
2024-12-21 19:07:41,780:INFO:               numpy: 1.22.4
2024-12-21 19:07:41,780:INFO:              pandas: 2.0.3
2024-12-21 19:07:41,780:INFO:              jinja2: 3.1.4
2024-12-21 19:07:41,780:INFO:               scipy: 1.7.3
2024-12-21 19:07:41,780:INFO:              joblib: 1.3.2
2024-12-21 19:07:41,780:INFO:             sklearn: 1.4.2
2024-12-21 19:07:41,780:INFO:                pyod: 2.0.2
2024-12-21 19:07:41,781:INFO:            imblearn: 0.12.4
2024-12-21 19:07:41,781:INFO:   category_encoders: 2.6.4
2024-12-21 19:07:41,781:INFO:            lightgbm: 4.5.0
2024-12-21 19:07:41,781:INFO:               numba: Not installed
2024-12-21 19:07:41,781:INFO:            requests: 2.32.3
2024-12-21 19:07:41,781:INFO:          matplotlib: 3.9.2
2024-12-21 19:07:41,781:INFO:          scikitplot: 0.3.7
2024-12-21 19:07:41,781:INFO:         yellowbrick: 1.5
2024-12-21 19:07:41,781:INFO:              plotly: 5.24.1
2024-12-21 19:07:41,781:INFO:    plotly-resampler: Not installed
2024-12-21 19:07:41,781:INFO:             kaleido: 0.2.1
2024-12-21 19:07:41,781:INFO:           schemdraw: 0.15
2024-12-21 19:07:41,781:INFO:         statsmodels: 0.14.0
2024-12-21 19:07:41,781:INFO:              sktime: 0.26.0
2024-12-21 19:07:41,781:INFO:               tbats: 1.1.3
2024-12-21 19:07:41,781:INFO:            pmdarima: 2.0.4
2024-12-21 19:07:41,781:INFO:              psutil: 6.1.0
2024-12-21 19:07:41,781:INFO:          markupsafe: 2.1.3
2024-12-21 19:07:41,781:INFO:             pickle5: Not installed
2024-12-21 19:07:41,781:INFO:         cloudpickle: 3.0.0
2024-12-21 19:07:41,781:INFO:         deprecation: 2.1.0
2024-12-21 19:07:41,782:INFO:              xxhash: 3.5.0
2024-12-21 19:07:41,782:INFO:           wurlitzer: Not installed
2024-12-21 19:07:41,782:INFO:PyCaret optional dependencies:
2024-12-21 19:07:41,803:INFO:                shap: Not installed
2024-12-21 19:07:41,803:INFO:           interpret: Not installed
2024-12-21 19:07:41,803:INFO:                umap: Not installed
2024-12-21 19:07:41,803:INFO:     ydata_profiling: Not installed
2024-12-21 19:07:41,803:INFO:  explainerdashboard: Not installed
2024-12-21 19:07:41,803:INFO:             autoviz: Not installed
2024-12-21 19:07:41,803:INFO:           fairlearn: Not installed
2024-12-21 19:07:41,803:INFO:          deepchecks: Not installed
2024-12-21 19:07:41,803:INFO:             xgboost: Not installed
2024-12-21 19:07:41,803:INFO:            catboost: Not installed
2024-12-21 19:07:41,804:INFO:              kmodes: Not installed
2024-12-21 19:07:41,804:INFO:             mlxtend: Not installed
2024-12-21 19:07:41,804:INFO:       statsforecast: Not installed
2024-12-21 19:07:41,804:INFO:        tune_sklearn: Not installed
2024-12-21 19:07:41,804:INFO:                 ray: Not installed
2024-12-21 19:07:41,804:INFO:            hyperopt: Not installed
2024-12-21 19:07:41,804:INFO:              optuna: Not installed
2024-12-21 19:07:41,804:INFO:               skopt: Not installed
2024-12-21 19:07:41,804:INFO:              mlflow: Not installed
2024-12-21 19:07:41,804:INFO:              gradio: Not installed
2024-12-21 19:07:41,804:INFO:             fastapi: Not installed
2024-12-21 19:07:41,804:INFO:             uvicorn: Not installed
2024-12-21 19:07:41,804:INFO:              m2cgen: Not installed
2024-12-21 19:07:41,804:INFO:           evidently: Not installed
2024-12-21 19:07:41,804:INFO:               fugue: Not installed
2024-12-21 19:07:41,804:INFO:           streamlit: 1.40.1
2024-12-21 19:07:41,804:INFO:             prophet: Not installed
2024-12-21 19:07:41,804:INFO:None
2024-12-21 19:07:41,805:INFO:Set up data.
2024-12-21 19:07:41,815:INFO:Set up folding strategy.
2024-12-21 19:07:41,815:INFO:Set up train/test split.
2024-12-21 19:07:41,825:INFO:Set up index.
2024-12-21 19:07:41,827:INFO:Assigning column types.
2024-12-21 19:07:41,831:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-21 19:07:41,888:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-21 19:07:41,894:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-21 19:07:41,941:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:41,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,000:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-21 19:07:42,001:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-21 19:07:42,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,038:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,038:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-21 19:07:42,101:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-21 19:07:42,143:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,143:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,199:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-21 19:07:42,237:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,238:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,238:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-12-21 19:07:42,332:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,333:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,431:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,435:INFO:Preparing preprocessing pipeline...
2024-12-21 19:07:42,442:INFO:Set up label encoding.
2024-12-21 19:07:42,443:INFO:Set up simple imputation.
2024-12-21 19:07:42,443:INFO:Set up feature normalization.
2024-12-21 19:07:42,484:INFO:Finished creating preprocessing pipeline.
2024-12-21 19:07:42,491:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2024-12-21 19:07:42,491:INFO:Creating final display dataframe.
2024-12-21 19:07:42,614:INFO:Setup _display_container:                     Description                     Value
0                    Session id                      2024
1                        Target                   diabete
2                   Target type                    Binary
3                Target mapping  negative: 0, positive: 1
4           Original data shape                  (724, 5)
5        Transformed data shape                  (724, 5)
6   Transformed train set shape                  (506, 5)
7    Transformed test set shape                  (218, 5)
8              Numeric features                         4
9                    Preprocess                      True
10              Imputation type                    simple
11           Numeric imputation                      mean
12       Categorical imputation                      mode
13                    Normalize                      True
14             Normalize method                    zscore
15               Fold Generator           StratifiedKFold
16                  Fold Number                         5
17                     CPU Jobs                        -1
18                      Use GPU                     False
19               Log Experiment                     False
20              Experiment Name          clf-default-name
21                          USI                      e10a
2024-12-21 19:07:42,734:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,735:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,872:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,873:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:42,874:INFO:setup() successfully completed in 1.8s...............
2024-12-21 19:07:42,904:INFO:gpu_param set to False
2024-12-21 19:07:43,046:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:43,046:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:43,143:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:43,143:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-21 19:07:43,171:INFO:Initializing create_model()
2024-12-21 19:07:43,171:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-21 19:07:43,171:INFO:Checking exceptions
2024-12-21 19:07:43,248:INFO:Importing libraries
2024-12-21 19:07:43,249:INFO:Copying training dataset
2024-12-21 19:07:43,270:INFO:Defining folds
2024-12-21 19:07:43,271:INFO:Declaring metric variables
2024-12-21 19:07:43,324:INFO:Importing untrained model
2024-12-21 19:07:43,333:INFO:Logistic Regression Imported successfully
2024-12-21 19:07:43,355:INFO:Starting cross validation
2024-12-21 19:07:43,357:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-12-21 19:07:52,143:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,143:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,143:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,149:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,150:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,151:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,156:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,158:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,159:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,329:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,337:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,345:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,502:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,505:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,510:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,522:INFO:Calculating mean and std
2024-12-21 19:07:52,525:INFO:Creating metrics dataframe
2024-12-21 19:07:52,535:INFO:Finalizing model
2024-12-21 19:07:52,594:INFO:Uploading results into container
2024-12-21 19:07:52,597:INFO:Uploading model into container now
2024-12-21 19:07:52,626:INFO:_master_model_container: 1
2024-12-21 19:07:52,626:INFO:_display_container: 2
2024-12-21 19:07:52,628:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-12-21 19:07:52,628:INFO:create_model() successfully completed......................................
2024-12-21 19:07:52,816:INFO:Initializing predict_model()
2024-12-21 19:07:52,817:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000013499A33550>)
2024-12-21 19:07:52,817:INFO:Checking exceptions
2024-12-21 19:07:52,818:INFO:Preloading libraries
2024-12-21 19:07:52,962:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,966:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:52,970:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:53,188:INFO:Initializing plot_model()
2024-12-21 19:07:53,188:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, system=True)
2024-12-21 19:07:53,190:INFO:Checking exceptions
2024-12-21 19:07:53,206:INFO:Preloading libraries
2024-12-21 19:07:53,207:INFO:Copying training dataset
2024-12-21 19:07:53,207:INFO:Plot type: confusion_matrix
2024-12-21 19:07:53,481:INFO:Fitting Model
2024-12-21 19:07:53,504:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2024-12-21 19:07:53,504:INFO:Scoring test/hold-out set
2024-12-21 19:07:53,698:INFO:Visual Rendered Successfully
2024-12-21 19:07:53,794:INFO:plot_model() successfully completed......................................
2024-12-21 19:07:53,820:INFO:Initializing tune_model()
2024-12-21 19:07:53,820:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>)
2024-12-21 19:07:53,820:INFO:Checking exceptions
2024-12-21 19:07:53,855:INFO:Copying training dataset
2024-12-21 19:07:53,869:INFO:Checking base model
2024-12-21 19:07:53,869:INFO:Base model : Logistic Regression
2024-12-21 19:07:53,884:INFO:Declaring metric variables
2024-12-21 19:07:53,896:INFO:Defining Hyperparameters
2024-12-21 19:07:54,331:INFO:Tuning with n_jobs=-1
2024-12-21 19:07:54,331:INFO:Initializing RandomizedSearchCV
2024-12-21 19:07:55,101:INFO:best_params: {'actual_estimator__class_weight': {}, 'actual_estimator__C': 3.989}
2024-12-21 19:07:55,102:INFO:Hyperparameter search completed
2024-12-21 19:07:55,102:INFO:SubProcess create_model() called ==================================
2024-12-21 19:07:55,103:INFO:Initializing create_model()
2024-12-21 19:07:55,103:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000134985DEF70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': {}, 'C': 3.989})
2024-12-21 19:07:55,103:INFO:Checking exceptions
2024-12-21 19:07:55,103:INFO:Importing libraries
2024-12-21 19:07:55,104:INFO:Copying training dataset
2024-12-21 19:07:55,112:INFO:Defining folds
2024-12-21 19:07:55,112:INFO:Declaring metric variables
2024-12-21 19:07:55,116:INFO:Importing untrained model
2024-12-21 19:07:55,116:INFO:Declaring custom model
2024-12-21 19:07:55,121:INFO:Logistic Regression Imported successfully
2024-12-21 19:07:55,135:INFO:Starting cross validation
2024-12-21 19:07:55,136:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-12-21 19:07:55,228:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,243:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,250:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,257:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,258:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,267:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,270:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,274:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,279:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,283:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,285:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,319:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,324:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,328:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,334:INFO:Calculating mean and std
2024-12-21 19:07:55,335:INFO:Creating metrics dataframe
2024-12-21 19:07:55,343:INFO:Finalizing model
2024-12-21 19:07:55,374:INFO:Uploading results into container
2024-12-21 19:07:55,376:INFO:Uploading model into container now
2024-12-21 19:07:55,378:INFO:_master_model_container: 2
2024-12-21 19:07:55,378:INFO:_display_container: 4
2024-12-21 19:07:55,378:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-12-21 19:07:55,379:INFO:create_model() successfully completed......................................
2024-12-21 19:07:55,480:INFO:SubProcess create_model() end ==================================
2024-12-21 19:07:55,480:INFO:choose_better activated
2024-12-21 19:07:55,484:INFO:SubProcess create_model() called ==================================
2024-12-21 19:07:55,485:INFO:Initializing create_model()
2024-12-21 19:07:55,485:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-21 19:07:55,486:INFO:Checking exceptions
2024-12-21 19:07:55,490:INFO:Importing libraries
2024-12-21 19:07:55,490:INFO:Copying training dataset
2024-12-21 19:07:55,495:INFO:Defining folds
2024-12-21 19:07:55,495:INFO:Declaring metric variables
2024-12-21 19:07:55,495:INFO:Importing untrained model
2024-12-21 19:07:55,495:INFO:Declaring custom model
2024-12-21 19:07:55,496:INFO:Logistic Regression Imported successfully
2024-12-21 19:07:55,496:INFO:Starting cross validation
2024-12-21 19:07:55,497:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-12-21 19:07:55,568:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,569:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,573:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,576:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,577:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,579:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,583:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,586:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,594:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,632:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,636:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,640:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:55,651:INFO:Calculating mean and std
2024-12-21 19:07:55,652:INFO:Creating metrics dataframe
2024-12-21 19:07:55,654:INFO:Finalizing model
2024-12-21 19:07:55,670:INFO:Uploading results into container
2024-12-21 19:07:55,670:INFO:Uploading model into container now
2024-12-21 19:07:55,671:INFO:_master_model_container: 3
2024-12-21 19:07:55,671:INFO:_display_container: 5
2024-12-21 19:07:55,672:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-12-21 19:07:55,672:INFO:create_model() successfully completed......................................
2024-12-21 19:07:55,780:INFO:SubProcess create_model() end ==================================
2024-12-21 19:07:55,780:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-12-21 19:07:55,781:INFO:LogisticRegression(C=3.989, class_weight={}, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.751
2024-12-21 19:07:55,781:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-12-21 19:07:55,781:INFO:choose_better completed
2024-12-21 19:07:55,781:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-12-21 19:07:55,796:INFO:_master_model_container: 3
2024-12-21 19:07:55,796:INFO:_display_container: 4
2024-12-21 19:07:55,797:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-12-21 19:07:55,798:INFO:tune_model() successfully completed......................................
2024-12-21 19:07:55,971:INFO:Initializing predict_model()
2024-12-21 19:07:55,972:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000013495373790>)
2024-12-21 19:07:55,972:INFO:Checking exceptions
2024-12-21 19:07:55,972:INFO:Preloading libraries
2024-12-21 19:07:56,063:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:56,067:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:56,071:WARNING:C:\Users\Administrateur\AppData\Roaming\Python\Python39\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-21 19:07:56,227:INFO:Initializing plot_model()
2024-12-21 19:07:56,228:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, system=True)
2024-12-21 19:07:56,228:INFO:Checking exceptions
2024-12-21 19:07:56,236:INFO:Preloading libraries
2024-12-21 19:07:56,237:INFO:Copying training dataset
2024-12-21 19:07:56,237:INFO:Plot type: feature
2024-12-21 19:07:56,518:INFO:Visual Rendered Successfully
2024-12-21 19:07:56,635:INFO:plot_model() successfully completed......................................
2024-12-21 19:07:56,696:INFO:Initializing finalize_model()
2024-12-21 19:07:56,696:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-12-21 19:07:56,697:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-12-21 19:07:56,705:INFO:Initializing create_model()
2024-12-21 19:07:56,705:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000013496F94A30>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2024, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-12-21 19:07:56,706:INFO:Checking exceptions
2024-12-21 19:07:56,712:INFO:Importing libraries
2024-12-21 19:07:56,712:INFO:Copying training dataset
2024-12-21 19:07:56,714:INFO:Defining folds
2024-12-21 19:07:56,714:INFO:Declaring metric variables
2024-12-21 19:07:56,715:INFO:Importing untrained model
2024-12-21 19:07:56,715:INFO:Declaring custom model
2024-12-21 19:07:56,716:INFO:Logistic Regression Imported successfully
2024-12-21 19:07:56,718:INFO:Cross validation set to False
2024-12-21 19:07:56,718:INFO:Fitting Model
2024-12-21 19:07:56,756:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-12-21 19:07:56,756:INFO:create_model() successfully completed......................................
2024-12-21 19:07:56,869:INFO:_master_model_container: 3
2024-12-21 19:07:56,869:INFO:_display_container: 5
2024-12-21 19:07:56,877:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-12-21 19:07:56,878:INFO:finalize_model() successfully completed......................................
2024-12-21 19:07:57,069:INFO:Initializing save_model()
2024-12-21 19:07:57,089:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_fotio, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ADMINI~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-12-21 19:07:57,090:INFO:Adding model into prep_pipe
2024-12-21 19:07:57,090:WARNING:Only Model saved as it was a pipeline.
2024-12-21 19:07:57,100:INFO:modele_fotio.pkl saved in current working directory
2024-12-21 19:07:57,115:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['diastolic', 'bodymass', 'age',
                                             'plasma'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2024,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-12-21 19:07:57,115:INFO:save_model() successfully completed......................................
